{"version":3,"sources":["components/footer.js","utils/hooks.js","components/tooltips.js","components/level.js","components/minigraph.js","components/maplegend.js","components/choropleth.js","components/mapexplorer.js","components/timeseries.js","components/timeseriesexplorer.js","components/clusters.js","components/deltabargraph.js","components/statemetacard.js","components/statemeta.js","components/state.js"],"names":["React","memo","props","t","useTranslation","className","style","animationDelay","href","target","rel","justifyContent","useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","observer","forEach","entry","index","contentRect","observe","unobserve","testedToolTip","onClick","e","stopPropagation","data-for","data-tip","data-event","data-event-off","id","place","type","effect","multiline","scrollHide","globalEventOff","data","setData","useEffectOnce","active","confirmed","recovered","deaths","deltaconfirmed","deltadeaths","deltarecovered","isNaN","formatNumber","timeseries","timeSeriesData","setTimeSeriesData","svgRef1","useRef","svgRef2","svgRef3","svgRef4","slice","length","graphData","useCallback","margin","chartRight","chartBottom","svg1","d3","svg2","svg3","svg4","d","dailyconfirmed","dailyrecovered","dailydeceased","xScale","domain","date","range","svgArray","dataTypes","colors","dailyMin","dailyactive","dailyMax","Math","max","domainMinMax","yScale","svg","i","color","path","append","datum","attr","x","y","curve","totalLength","node","getTotalLength","transition","delay","duration","selectAll","enter","on","width","height","viewBox","preserveAspectRatio","MapLegend","mapScale","statistic","mapStatistic","mapOption","svgRef","wrapperRef","getBoundingClientRect","MAP_STATISTICS","ZONE","call","legend","tickValues","marginLeft","marginRight","ordinalWeights","Object","values","HOTSPOTS","select","remove","maxRadius","join","text","title","capitalizeAll","PER_MILLION","ticks","tickFormat","n","TOTAL","Number","isInteger","position","tickSize","marginTop","marginBottom","tickAdjust","g","interpolate","min","copy","rangeRound","ramp","toDataURL","interpolator","assign","undefined","round","map","invertExtent","thresholds","quantiles","thresholdFormat","widthScale","reduce","a","b","xPos","w","acc","bandwidth","canvas","context","getContext","fillStyle","fillRect","caseColor","caseType","alpha","ChoroplethMap","mapData","currentMap","changeMap","regionHighlighted","setRegionHighlighted","isCountryLoaded","mapMeta","MAP_META","name","geoDataResponse","useSWR","geoDataFile","file","useMemo","stat","clamp","colorInterpolator","geoData","topology","topojson","objects","graphObjectStates","graphObjectDistricts","widthDefault","heightDefault","projection","fitWidth","fitSize","bBox","bounds","split","features","view","MAP_VIEWS","STATES","f","district","properties","state","st_nm","obj","onceTouchedRegion","regionSelection","sel","region","mapType","MAP_TYPES","STATE","this","parseFloat","total","toFixed","toString","circlesData","value","Unknown","sort","centroid","meshStates","COUNTRY","meshDistricts","DISTRICTS","highlightRegionInMap","each","highlighted","parentNode","appendChild","Fragment","colorInterpolationFilters","getRegionFromState","mapName","states","districts","zones","stateTestData","anchor","setAnchor","setMapOption","setCurrentMap","currentMapMeta","currentMapData","dtype","keys","acc1","acc2","zone","typeCount","parseInt","STATE_POPULATIONS","districtWiseData","districtData","Total","stateData","find","getRegionFromDistrict","hoveredRegion","panelRegion","hoveredRegionCount","hoveredRegionZone","switchMapToState","newMapMeta","topDistrict","filter","ReactDOM","unstable_batchedUpdates","testObj","display","window","innerWidth","action","totaltested","parse","updatedon","Date","formatDayMonth","source","lastupdatedtime","formatDate","formatLastUpdated","to","STATE_CODES_REVERSE","prevProps","currProps","equal","timeseriesProp","chartType","mode","logMode","stateCode","Infinity","lastDaysCount","setLastDaysCount","setTimeseries","datapoint","setDatapoint","setIndex","moving","setMoving","svgRef5","transformTimeSeries","slicedTimeseries","sliceTimeseriesFromEnd","T","yScales","svg5","dateMin","subDays","dateMax","addDays","numTicksX","xAxis","tick","formatTimeseriesTickX","xAxis2","yAxis","tickPadding","plotTotal","dataTypesTotal","dataTypesDaily","uniformScaleMin","totalactive","totalrecovered","totaldeceased","uniformScaleMax","totalconfirmed","yScaleUniformLinear","nice","yScaleUniformLog","yScaleLinear","yScaleLog","yScaleDailyUniform","focus","mousemove","xm","invert","bisectDate","left","j","mouseout","typeTotal","typeDaily","filteredTimeseries","reverse","p","getPointAtLength","repeat","dateStr","formatTimeseriesDate","chartKey1","chartKey2","chartKey3","chartKey4","chartKey5","currentStatusCount","currentDiff","formatedDiff","aria-label","isIntersecting","activeStateCode","onHighlightState","useLocalStorage","setChartType","isTimeseriesIntersecting","setIsTimeseriesIntersecting","timeseriesMode","setTimeseriesMode","timeseriesLogMode","setTimeseriesLogMode","options","rootMargin","onChange","htmlFor","checked","event","disabled","selectedState","selectedOptions","getAttribute","JSON","s","statecode","key","statedata","stringify","fetched","setFetched","stateRawData","setStateRawData","networkData","setNetworkData","axios","get","rawDataResponse","raw_data","console","log","getData","contractedStr","v","contractedfromwhichpatientsuspected","replace","sources","Set","match","nodes","nodesSet","links","contracted","pid","patientnumber","add","push","group","has","raw","prepareNetworkData","NetworkGraph","fgRef","fg","document","getElementById","offsetWidth","d3Force","strength","currNode","nodeLabel","nodeColor","linkDirectionalParticleColor","linkDirectionalParticles","linkDirectionalParticleWidth","link","enableZoomPanInteraction","render","ctype","formatTime","paddingInner","h","r","sign","abs","roundedBar","textSelection","StateMetaCard","formula","description","StateMeta","testObject","population","lastSevenDaysData","totalData","sevenDayBeforeData","sevenDayBeforeDate","format","previousDayData","previousDayDate","confirmedPerMillion","recoveryPercent","activePercent","deathPercent","testPerMillion","growthRate","totalConfirmedPerMillion","updatedDate","Breadcrumbs","stateName","Item","direction","selected","Caret","Menu","STATE_CODES","useParams","toUpperCase","allStateData","setAllStateData","districtZones","setDistrictZones","setStateData","testData","setTestData","setSources","setDistrictData","useMeasure","mapSwitcher","showAllDistricts","setShowAllDistricts","getState","Promise","all","dataResponse","stateDistrictWiseResponse","statesDailyResponse","stateTestResponse","sourcesResponse","zonesResponse","statewise","ts","parseStateTimeseries","testTs","parseStateTestTimeseries","states_tested_data","tsMerged","mergeTimeseries","sourceList","sources_list","parseStateTestData","parseDistrictZones","anime","targets","translateX","easing","opacity","gridRowCount","gridColumnCount","districtCount","ceil","getGridRowCount","Helmet","content","formatDateAbsolute","transform","num","gridTemplateRows","districtB","districtA","cases","delta","every","day"],"mappings":"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","file":"static/js/State.0ce5a5f3.chunk.js","sourcesContent":["import React from 'react';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\n\nfunction Footer(props) {\n  const {t} = useTranslation();\n\n  return (\n    <footer className=\"fadeInUp\" style={{animationDelay: '2s'}}>\n      <h5>{t('We stand with everyone fighting on the frontlines')}</h5>\n\n      <div className=\"link\">\n        <a\n          href=\"https://github.com/covid19india\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          covid19india\n        </a>\n      </div>\n\n      <a\n        href=\"https://github.com/covid19india/covid19india-react\"\n        className=\"button github\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Icon.GitHub />\n        <span>{t('Open Sourced on GitHub')}</span>\n      </a>\n\n      <a\n        className=\"button excel\"\n        href=\"http://patientdb.covid19india.org\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Icon.Database />\n        <span>{t('Crowdsourced Patient Database')}</span>\n      </a>\n\n      <a\n        href=\"https://twitter.com/covid19indiaorg\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"button twitter\"\n        style={{justifyContent: 'center'}}\n      >\n        <Icon.Twitter />\n        <span>{t('View updates on Twitter')}</span>\n      </a>\n\n      <a\n        href=\"https://bit.ly/covid19crowd\"\n        className=\"button telegram\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Icon.MessageCircle />\n        <span>{t('Join Telegram to Collaborate!')}</span>\n      </a>\n    </footer>\n  );\n}\n\nexport default React.memo(Footer);\n","import {ResizeObserver} from '@juggle/resize-observer';\nimport {useState, useEffect} from 'react';\n\nexport const useResizeObserver = (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries, observer) => {\n      entries.forEach((entry, index) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n","import React from 'react';\nimport * as Icon from 'react-feather';\nimport ReactTooltip from 'react-tooltip';\n\nexport const testedToolTip = (\n  <span className=\"tooltip-tested\" onClick={(e) => e.stopPropagation()}>\n    <Icon.Info\n      data-for=\"tested\"\n      data-tip=\"Reporting total samples tested from ICMR data\"\n      data-event=\"touchstart mouseover\"\n      data-event-off=\"mouseleave\"\n    />\n    <ReactTooltip\n      id=\"tested\"\n      place=\"top\"\n      type=\"dark\"\n      effect=\"solid\"\n      multiline={true}\n      scrollHide={true}\n      globalEventOff=\"click\"\n    />\n  </span>\n);\n","import {formatNumber} from '../utils/commonfunctions';\n\nimport React, {useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useEffectOnce} from 'react-use';\n\nfunction Level(props) {\n  const [data, setData] = useState(props.data);\n  const {t} = useTranslation();\n\n  useEffectOnce(() => {\n    setData({\n      active: +props.data.active,\n      confirmed: +props.data.confirmed,\n      recovered: +props.data.recovered,\n      deaths: +props.data.deaths,\n      deltaconfirmed: +props.data.deltaconfirmed,\n      deltadeaths: +props.data.deltadeaths,\n      deltarecovered: +props.data.deltarecovered,\n    });\n  });\n\n  return (\n    <div className=\"Level\">\n      <div\n        className=\"level-item is-cherry fadeInUp\"\n        style={{animationDelay: '1s'}}\n      >\n        <h5>{t('Confirmed')}</h5>\n        <h4>\n          [\n          {isNaN(data.deltaconfirmed)\n            ? ''\n            : data.deltaconfirmed > 0\n            ? '+' + formatNumber(data.deltaconfirmed)\n            : '+0'}\n          ]\n        </h4>\n        <h1>{formatNumber(data.confirmed)} </h1>\n      </div>\n\n      <div\n        className=\"level-item is-blue fadeInUp\"\n        style={{animationDelay: '1.1s'}}\n      >\n        <h5 className=\"heading\">{t('Active')}</h5>\n        <h4>&nbsp;</h4>\n        <h1 className=\"title has-text-info\">{formatNumber(data.active)}</h1>\n      </div>\n\n      <div\n        className=\"level-item is-green fadeInUp\"\n        style={{animationDelay: '1.2s'}}\n      >\n        <h5 className=\"heading\">{t('Recovered')}</h5>\n        <h4>\n          [\n          {isNaN(data.deltarecovered)\n            ? ''\n            : data.deltarecovered > 0\n            ? '+' + formatNumber(data.deltarecovered)\n            : '+0'}\n          ]\n        </h4>\n        <h1 className=\"title has-text-success\">\n          {formatNumber(data.recovered)}{' '}\n        </h1>\n      </div>\n\n      <div\n        className=\"level-item is-gray fadeInUp\"\n        style={{animationDelay: '1.3s'}}\n      >\n        <h5 className=\"heading\">{t('Deceased')}</h5>\n        <h4>\n          [\n          {isNaN(data.deltadeaths)\n            ? ''\n            : data.deltadeaths > 0\n            ? '+' + formatNumber(data.deltadeaths)\n            : '+0'}\n          ]\n        </h4>\n        <h1 className=\"title has-text-grey\">{formatNumber(data.deaths)}</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(Level);\n","import * as d3 from 'd3';\nimport React, {useState, useEffect, useRef, useCallback} from 'react';\n\nfunction Minigraph({timeseries}) {\n  const [timeSeriesData, setTimeSeriesData] = useState([]);\n  const svgRef1 = useRef();\n  const svgRef2 = useRef();\n  const svgRef3 = useRef();\n  const svgRef4 = useRef();\n\n  useEffect(() => {\n    setTimeSeriesData(timeseries.slice(timeseries.length - 20));\n  }, [timeseries]);\n\n  const graphData = useCallback((data) => {\n    if (data.length <= 1) return 0;\n\n    const margin = {top: 10, right: 5, bottom: 20, left: 5};\n    const chartRight = 100 - margin.right;\n    const chartBottom = 100 - margin.bottom;\n\n    const svg1 = d3.select(svgRef1.current);\n    const svg2 = d3.select(svgRef2.current);\n    const svg3 = d3.select(svgRef3.current);\n    const svg4 = d3.select(svgRef4.current);\n\n    data.forEach((d) => {\n      d['dailyactive'] = d.dailyconfirmed - d.dailyrecovered - d.dailydeceased;\n    });\n\n    const xScale = d3\n      .scaleTime()\n      .domain(d3.extent(data, (d) => d.date))\n      .range([margin.left, chartRight]);\n\n    const svgArray = [svg1, svg2, svg3, svg4];\n    const dataTypes = [\n      'dailyconfirmed',\n      'dailyactive',\n      'dailyrecovered',\n      'dailydeceased',\n    ];\n    const colors = ['#ff073a', '#007bff', '#28a745', '#6c757d'];\n\n    const dailyMin = d3.min(data, (d) => d.dailyactive);\n    const dailyMax = d3.max(data, (d) =>\n      Math.max(d.dailyconfirmed, d.dailyrecovered, d.dailydeceased)\n    );\n    const domainMinMax = Math.max(-dailyMin, dailyMax);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([-domainMinMax, domainMinMax])\n      .range([chartBottom, margin.top]);\n\n    svgArray.forEach((svg, i) => {\n      const type = dataTypes[i];\n      const color = colors[i];\n\n      const path = svg\n        .append('path')\n        .datum(data)\n        .attr('fill', 'none')\n        .attr('stroke', color + '99')\n        .attr('stroke-width', 2.5)\n        .attr('cursor', 'pointer')\n        .attr(\n          'd',\n          d3\n            .line()\n            .x((d) => xScale(d.date))\n            .y((d) => yScale(d[type]))\n            .curve(d3.curveCardinal)\n        );\n\n      const totalLength = path.node().getTotalLength();\n      path\n        .attr('stroke-dasharray', totalLength + ' ' + totalLength)\n        .attr('stroke-dashoffset', totalLength)\n        .transition()\n        .delay(500)\n        .duration(2500)\n        .attr('stroke-dashoffset', 0);\n\n      svg\n        .selectAll('.dot')\n        .data(data.slice(data.length - 1))\n        .enter()\n        .append('circle')\n        .attr('fill', color)\n        .attr('stroke', color)\n        .attr('r', 2)\n        .attr('cursor', 'pointer')\n        .attr('cx', (d) => xScale(d.date))\n        .attr('cy', (d) => yScale(d[type]))\n        .on('mouseover', (d) => {\n          d3.select(d3.event.target).attr('r', '5');\n        })\n        .on('mouseout', (d) => {\n          d3.select(d3.event.target).attr('r', '2');\n        })\n        .style('opacity', 0)\n        .transition()\n        .delay(500)\n        .duration(2500)\n        .style('opacity', 1);\n    });\n  }, []);\n\n  useEffect(() => {\n    graphData(timeSeriesData);\n  }, [timeSeriesData, graphData]);\n\n  return (\n    <div className=\"Minigraph\">\n      <div className=\"svg-parent fadeInUp\" style={{animationDelay: '1.4s'}}>\n        <svg\n          ref={svgRef1}\n          width=\"100\"\n          height=\"75\"\n          viewBox=\"0 0 100 75\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        />\n      </div>\n\n      <div\n        className=\"svg-parent is-blue fadeInUp\"\n        style={{animationDelay: '1.5s'}}\n      >\n        <svg\n          ref={svgRef2}\n          width=\"100\"\n          height=\"75\"\n          viewBox=\"0 0 100 75\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        />\n      </div>\n\n      <div\n        className=\"svg-parent is-green fadeInUp\"\n        style={{animationDelay: '1.6s'}}\n      >\n        <svg\n          ref={svgRef3}\n          width=\"100\"\n          height=\"75\"\n          viewBox=\"0 0 100 75\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        />\n      </div>\n\n      <div\n        className=\"svg-parent is-gray fadeInUp\"\n        style={{animationDelay: '1.7s'}}\n      >\n        <svg\n          ref={svgRef4}\n          width=\"100\"\n          height=\"75\"\n          viewBox=\"0 0 100 75\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(Minigraph);\n","import {MAP_STATISTICS} from '../constants';\nimport {capitalizeAll, formatNumber} from '../utils/commonfunctions';\nimport {useResizeObserver} from '../utils/hooks';\n\nimport * as d3 from 'd3';\nimport React, {useEffect, useRef} from 'react';\n\nfunction MapLegend({mapScale, statistic, mapStatistic, mapOption}) {\n  const svgRef = useRef(null);\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    const {width, height} =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    if (mapStatistic === MAP_STATISTICS.ZONE) {\n      svg.call(() =>\n        legend({\n          svg: svg,\n          color: mapScale,\n          width: width,\n          height: height,\n          tickValues: [],\n          marginLeft: 2,\n          marginRight: 20,\n          ordinalWeights: Object.values(statistic),\n        })\n      );\n    } else if (mapStatistic === MAP_STATISTICS.HOTSPOTS) {\n      const t = svg.transition().duration(500);\n      svg\n        .select('.ramp')\n        .transition(t)\n        .attr('opacity', 0)\n        .attr('xlink:href', null);\n\n      svg\n        .select('.bars')\n        .selectAll('rect')\n        .transition(t)\n        .attr('opacity', 0)\n        .remove();\n      svg.selectAll('.axis > *').remove();\n\n      const maxRadius = mapScale.domain()[1];\n\n      const legend = svg\n        .select('.circles')\n        .attr('transform', `translate(48,40)`)\n        .attr('text-anchor', 'middle');\n\n      legend\n        .selectAll('circle')\n        .data([maxRadius / 10, (maxRadius * 2) / 5, maxRadius])\n        .join('circle')\n        .attr('fill', 'none')\n        .attr('stroke', '#ccc')\n        .transition(t)\n        .attr('cy', (d) => -mapScale(d))\n        .attr('r', mapScale);\n\n      legend\n        .selectAll('text')\n        .data([maxRadius / 10, (maxRadius * 2) / 5, maxRadius])\n        .join('text')\n        .attr('dy', '1.3em')\n        .transition(t)\n        .attr('y', (d) => -2 * mapScale(d))\n        .text(d3.format('.1s'));\n    } else {\n      svg.call(() =>\n        legend({\n          svg: svg,\n          color: mapScale,\n          title:\n            capitalizeAll(mapOption) +\n            (mapStatistic === MAP_STATISTICS.PER_MILLION\n              ? ' cases per million'\n              : ' cases'),\n          width: width,\n          height: height,\n          ticks: 5,\n          tickFormat: function (d, i, n) {\n            if (mapStatistic === MAP_STATISTICS.TOTAL && !Number.isInteger(d))\n              return;\n            if (i === n.length - 1) return formatNumber(d) + '+';\n            return formatNumber(d);\n          },\n          marginLeft: 2,\n          marginRight: 20,\n        })\n      );\n    }\n    svg.attr('class', mapStatistic === MAP_STATISTICS.ZONE ? 'zone' : '');\n  });\n\n  return (\n    <div\n      className=\"svg-parent maplegend fadeInUp\"\n      style={{animationDelay: '2.5s', height: 50}}\n      ref={wrapperRef}\n    >\n      <svg id=\"legend\" preserveAspectRatio=\"xMidYMid meet\" ref={svgRef}>\n        <image className=\"ramp\" />\n        <g className=\"bars\"></g>\n        <g className=\"circles\"></g>\n        <g className=\"axis\">\n          <text className=\"axistext\" />\n        </g>\n      </svg>\n      <canvas\n        className=\"color-scale\"\n        style={{position: 'absolute', height: 0}}\n      />\n    </div>\n  );\n}\n\nexport default MapLegend;\n\nfunction legend({\n  svg,\n  color,\n  title,\n  tickSize = 6,\n  width = 320,\n  height = 44 + tickSize,\n  marginTop = 18,\n  marginRight = 0,\n  marginBottom = 16 + tickSize,\n  marginLeft = 0,\n  ticks = width / 64,\n  tickFormat,\n  tickValues,\n  ordinalWeights,\n} = {}) {\n  svg.selectAll('.circles > *').remove();\n  const t = svg.transition().duration(500);\n\n  let tickAdjust = (g) => {\n    const ticks = g.selectAll('.tick line');\n    ticks.attr('y1', marginTop + marginBottom - height);\n    // d3.select(ticks.nodes()[ticks.size() - 1]).remove();\n  };\n  let x;\n\n  // Continuous\n  if (color.interpolate) {\n    const n = Math.min(color.domain().length, color.range().length);\n\n    x = color\n      .copy()\n      .rangeRound(\n        d3.quantize(d3.interpolate(marginLeft, width - marginRight), n)\n      );\n\n    svg\n      .select('.ramp')\n      .attr('class', 'ramp')\n      .attr('x', marginLeft)\n      .attr('y', marginTop)\n      .attr('width', width - marginLeft - marginRight)\n      .attr('height', height - marginTop - marginBottom)\n      .attr('preserveAspectRatio', 'none')\n      .attr(\n        'xlink:href',\n        ramp(\n          color.copy().domain(d3.quantize(d3.interpolate(0, 1), n))\n        ).toDataURL()\n      );\n  }\n\n  // Sequential\n  else if (color.interpolator) {\n    svg\n      .select('.bars')\n      .selectAll('rect')\n      .transition(t)\n      .attr('opacity', 0)\n      .remove();\n\n    x = Object.assign(\n      color\n        .copy()\n        .interpolator(d3.interpolateRound(marginLeft, width - marginRight)),\n      {\n        range() {\n          return [marginLeft, width - marginRight];\n        },\n      }\n    );\n\n    svg\n      .select('.ramp')\n      .attr('class', 'ramp')\n      .attr('x', marginLeft)\n      .attr('y', marginTop)\n      .attr('width', width - marginLeft - marginRight)\n      .attr('height', height - marginTop - marginBottom)\n      .attr('preserveAspectRatio', 'none')\n      .attr('xlink:href', ramp(color.interpolator()).toDataURL())\n      .transition(t)\n      .attr('opacity', 1);\n\n    // scaleSequentialQuantile doesn’t implement ticks or tickFormat.\n    if (!x.ticks) {\n      if (tickValues === undefined) {\n        const n = Math.round(ticks + 1);\n        tickValues = d3\n          .range(n)\n          .map((i) => d3.quantile(color.domain(), i / (n - 1)));\n      }\n      if (typeof tickFormat !== 'function') {\n        tickFormat = d3.format(tickFormat === undefined ? ',f' : tickFormat);\n      }\n    }\n  }\n\n  // Threshold\n  else if (color.invertExtent) {\n    const thresholds = color.thresholds\n      ? color.thresholds() // scaleQuantize\n      : color.quantiles\n      ? color.quantiles() // scaleQuantile\n      : color.domain(); // scaleThreshold\n\n    const thresholdFormat =\n      tickFormat === undefined\n        ? (d) => d\n        : typeof tickFormat === 'string'\n        ? d3.format(tickFormat)\n        : tickFormat;\n\n    x = d3\n      .scaleLinear()\n      .domain([-1, color.range().length - 1])\n      .rangeRound([marginLeft, width - marginRight]);\n\n    svg\n      .append('g')\n      .selectAll('rect')\n      .data(color.range())\n      .join('rect')\n      .attr('x', (d, i) => x(i - 1))\n      .attr('y', marginTop)\n      .attr('width', (d, i) => x(i) - x(i - 1))\n      .attr('height', height - marginTop - marginBottom)\n      .attr('fill', (d) => d);\n\n    tickValues = d3.range(-1, thresholds.length);\n    tickFormat = (i) => {\n      if (i === -1) return thresholdFormat(1);\n      else if (i === thresholds.length - 1) return;\n      else if (i === thresholds.length - 2)\n        return thresholdFormat(thresholds[i] + '+', i);\n      return thresholdFormat(thresholds[i], i);\n    };\n  }\n\n  // Ordinal\n  else {\n    svg\n      .select('.ramp')\n      .transition(t)\n      .attr('opacity', 0)\n      .attr('xlink:href', null);\n    if (!ordinalWeights) {\n      x = d3\n        .scaleBand()\n        .domain(color.domain())\n        .rangeRound([marginLeft, width - marginRight]);\n      svg\n        .selectAll('rect')\n        .data(color.domain())\n        .join('rect')\n        .attr('x', x)\n        .attr('y', marginTop)\n        .attr('width', Math.max(0, x.bandwidth() - 1))\n        .attr('height', height - marginTop - marginBottom)\n        .attr('fill', color);\n    } else {\n      const widthScale = d3\n        .scaleLinear()\n        .domain([0, ordinalWeights.reduce((a, b) => a + b)])\n        .rangeRound([0, width - marginLeft - marginRight]);\n\n      const xPos = ordinalWeights.map((w, i) =>\n        ordinalWeights\n          .slice(0, i)\n          .reduce((acc, w) => acc + widthScale(w), marginLeft)\n      );\n\n      x = d3.scaleOrdinal().domain(color.domain()).range(xPos);\n\n      svg\n        .select('.bars')\n        .selectAll('rect')\n        .data(color.domain())\n        .join((enter) =>\n          enter\n            .append('rect')\n            .attr('x', x)\n            .attr('width', (d, i) => widthScale(ordinalWeights[i]))\n        )\n        .attr('y', marginTop)\n        .attr('height', height - marginTop - marginBottom)\n        .attr('fill', color)\n        .transition(t)\n        .attr('x', x)\n        .attr('width', (d, i) => widthScale(ordinalWeights[i]))\n        .attr('opacity', 1);\n    }\n\n    tickAdjust = () => {};\n  }\n\n  svg\n    .select('.axis')\n    .attr('transform', `translate(0,${height - marginBottom})`)\n    .transition(t)\n    .attr('class', 'axis')\n    .call(\n      d3\n        .axisBottom(x)\n        .ticks(ticks, typeof tickFormat === 'string' ? tickFormat : undefined)\n        .tickFormat(typeof tickFormat === 'function' ? tickFormat : undefined)\n        .tickSize(tickSize)\n        .tickValues(tickValues)\n    )\n    .on('start', () => {\n      svg.call(tickAdjust).call((svg) => svg.select('.domain').remove());\n    })\n    .call((g) =>\n      g\n        .select('.axistext')\n        .attr('class', 'axistext')\n        .attr('x', marginLeft)\n        .attr('y', marginTop + marginBottom - height - 6)\n        .attr('fill', 'currentColor')\n        .attr('text-anchor', 'start')\n        .attr('font-weight', 'bold')\n        .text(title)\n    );\n\n  return svg.node();\n}\n\nfunction ramp(color, n = 256) {\n  // const canvas = document.createElement('canvas');\n  const canvas = d3.select('.color-scale').node();\n  const context = ((canvas.width = n), (canvas.height = 1), canvas).getContext(\n    '2d'\n  );\n  for (let i = 0; i < n; ++i) {\n    context.fillStyle = color(i / (n - 1));\n    context.fillRect(i, 0, 1, 1);\n  }\n  return canvas;\n}\n","import MapLegend from './maplegend';\n\nimport {MAP_META, MAP_STATISTICS, MAP_TYPES, MAP_VIEWS} from '../constants';\nimport {capitalizeAll} from '../utils/commonfunctions';\n\nimport * as d3 from 'd3';\nimport React, {useCallback, useEffect, useMemo, useRef} from 'react';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport useSWR from 'swr';\nimport * as topojson from 'topojson';\n\nconst colorInterpolator = (caseType, t) => {\n  switch (caseType) {\n    case 'confirmed':\n      return d3.interpolateReds(t * 0.85);\n    case 'active':\n      return d3.interpolateBlues(t * 0.85);\n    case 'recovered':\n      return d3.interpolateGreens(t * 0.85);\n    case 'deceased':\n      return d3.interpolateGreys(t * 0.85);\n    default:\n      return;\n  }\n};\n\nconst caseColor = (caseType, alpha = '') => {\n  switch (caseType) {\n    case 'confirmed':\n      return '#ff073a' + alpha;\n    case 'active':\n      return '#007bff' + alpha;\n    case 'recovered':\n      return '#28a745' + alpha;\n    case 'deceased':\n      return '#6c757d' + alpha;\n    default:\n      return;\n  }\n};\n\nfunction ChoroplethMap({\n  statistic,\n  mapData,\n  currentMap,\n  changeMap,\n  regionHighlighted,\n  setRegionHighlighted,\n  mapOption,\n  isCountryLoaded,\n}) {\n  const {t} = useTranslation();\n  const svgRef = useRef(null);\n\n  const mapMeta = MAP_META[currentMap.name];\n  const geoDataResponse = useSWR(mapMeta.geoDataFile, async (file) => {\n    return await d3.json(file);\n  });\n\n  const mapScale = useMemo(() => {\n    if (currentMap.stat === MAP_STATISTICS.ZONE) {\n      return d3.scaleOrdinal(\n        ['Red', 'Orange', 'Green'],\n        ['#d73027', '#fee08b', '#66bd63']\n      );\n    } else if (currentMap.stat === MAP_STATISTICS.HOTSPOTS) {\n      const {width} = svgRef.current.getBoundingClientRect();\n      return d3\n        .scaleSqrt([0, statistic[mapOption].max], [0, width / 10])\n        .clamp(true);\n    } else {\n      return d3\n        .scaleSequential([0, Math.max(1, statistic[mapOption].max)], (t) =>\n          colorInterpolator(mapOption, t)\n        )\n        .clamp(true);\n    }\n  }, [currentMap.stat, statistic, mapOption]);\n\n  useEffect(() => {\n    if (!geoDataResponse.data) return;\n    const geoData = geoDataResponse.data;\n\n    const topology = topojson.feature(\n      geoData,\n      geoData.objects[mapMeta.graphObjectStates || mapMeta.graphObjectDistricts]\n    );\n\n    const svg = d3.select(svgRef.current);\n\n    if (!svg.attr('viewBox')) {\n      const {\n        width: widthDefault,\n        height: heightDefault,\n      } = svgRef.current.getBoundingClientRect();\n      const projection = isCountryLoaded\n        ? d3.geoMercator().fitWidth(widthDefault, topology)\n        : d3.geoMercator().fitSize([widthDefault, heightDefault], topology);\n      const path = d3.geoPath(projection);\n      const bBox = path.bounds(topology);\n      const [width, height] = [+bBox[1][0], bBox[1][1]];\n      svg.attr('viewBox', `0 0 ${width} ${height}`);\n    }\n    const bBox = svg.attr('viewBox').split(' ');\n    const [width, height] = [+bBox[2], +bBox[3]];\n\n    const projection = d3.geoMercator().fitSize([width, height], topology);\n    const path = d3.geoPath(projection);\n\n    // Add id to each feature\n    let features =\n      currentMap.stat !== MAP_STATISTICS.HOTSPOTS\n        ? currentMap.view === MAP_VIEWS.STATES\n          ? topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectStates]\n            ).features\n          : topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectDistricts]\n            ).features\n        : [\n            ...topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectStates]\n            ).features,\n            ...topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectDistricts]\n            ).features,\n          ];\n\n    features = features.map((f) => {\n      const district = f.properties.district;\n      const state = f.properties.st_nm;\n      const obj = Object.assign({}, f);\n      obj.id = `${currentMap.name}-${state}${district ? '-' + district : ''}`;\n      return obj;\n    });\n\n    /* Draw map */\n    const t = d3.transition().duration(500);\n    let onceTouchedRegion = null;\n    const regionSelection = svg\n      .select('.regions')\n      .selectAll('path')\n      .data(\n        currentMap.stat !== MAP_STATISTICS.HOTSPOTS ? features : [],\n        (d) => d.id\n      )\n      .join((enter) => {\n        const sel = enter\n          .append('path')\n          .attr('d', path)\n          .attr('stroke-width', 2)\n          .attr('stroke-opacity', 0)\n          .style('cursor', 'pointer')\n          .on('mouseenter', (d) => {\n            const region = {state: d.properties.st_nm};\n            if (d.properties.district) region.district = d.properties.district;\n            setRegionHighlighted(region);\n          })\n          .on('mouseleave', (d) => {\n            if (onceTouchedRegion === d) onceTouchedRegion = null;\n          })\n          .on('touchstart', (d) => {\n            if (onceTouchedRegion === d) onceTouchedRegion = null;\n            else onceTouchedRegion = d;\n          })\n          .on('click', (d) => {\n            d3.event.stopPropagation();\n            if (onceTouchedRegion || mapMeta.mapType === MAP_TYPES.STATE)\n              return;\n            // Disable pointer events till the new map is rendered\n            svg.attr('pointer-events', 'none');\n            svg\n              .select('.regions')\n              .selectAll('path')\n              .attr('pointer-events', 'none');\n            // Switch map\n            changeMap(d.properties.st_nm);\n          });\n        sel.append('title');\n        return sel;\n      })\n      .attr('pointer-events', 'none');\n\n    regionSelection\n      .transition(t)\n      .attr('fill', (d) => {\n        let n;\n        if (currentMap.stat === MAP_STATISTICS.ZONE) {\n          const state = d.properties.st_nm;\n          const district = d.properties.district;\n          n =\n            mapData[state] && mapData[state][district]\n              ? mapData[state][district]\n              : 0;\n        } else {\n          const state = d.properties.st_nm;\n          const district = d.properties.district;\n          if (district)\n            n =\n              mapData[state] &&\n              mapData[state][district] &&\n              mapData[state][district][mapOption]\n                ? mapData[state][district][mapOption]\n                : 0;\n          else\n            n =\n              mapData[state] && mapData[state][mapOption]\n                ? mapData[state][mapOption]\n                : 0;\n        }\n        const color = n === 0 ? '#ffffff00' : mapScale(n);\n        return color;\n      })\n      .attr(\n        'stroke',\n        currentMap.stat === MAP_STATISTICS.ZONE\n          ? '#343a40'\n          : caseColor(mapOption)\n      )\n      .on('end', function () {\n        d3.select(this).attr('pointer-events', 'all');\n      });\n\n    regionSelection.select('title').text((d) => {\n      if (currentMap.stat === MAP_STATISTICS.TOTAL) {\n        const state = d.properties.st_nm;\n        const district = d.properties.district;\n        let n;\n        if (district)\n          n =\n            mapData[state] && mapData[state][district]\n              ? mapData[state][district][mapOption]\n              : 0;\n        else n = mapData[state] ? mapData[state][mapOption] : 0;\n        return (\n          Number(\n            parseFloat(\n              100 * (n / (statistic[mapOption].total || 0.001))\n            ).toFixed(2)\n          ).toString() +\n          '% from ' +\n          capitalizeAll(district ? district : state)\n        );\n      }\n    });\n\n    svg\n      .transition()\n      .duration(mapMeta.mapType === MAP_TYPES.STATE ? t.duration() / 2 : 0)\n      .on('end', () =>\n        svg.attr('class', currentMap.stat === MAP_STATISTICS.ZONE ? 'zone' : '')\n      );\n\n    /* ----------BUBBLE MAP----------*/\n    let circlesData = [];\n    if (currentMap.stat === MAP_STATISTICS.HOTSPOTS) {\n      circlesData = features\n        .map((d) => {\n          const district = d.properties.district;\n          const state = d.properties.st_nm;\n          if (district) {\n            d.value =\n              mapData[state] && mapData[state][district]\n                ? mapData[state][district][mapOption]\n                : 0;\n          } else {\n            d.value =\n              mapData[state] && mapData[state].Unknown\n                ? mapData[state].Unknown[mapOption]\n                : 0;\n          }\n          return d;\n        })\n        .sort((a, b) => b.value - a.value);\n    }\n\n    svg\n      .select('.circles')\n      .selectAll('circle')\n      .data(circlesData, (d) => d.id)\n      .join((enter) =>\n        enter\n          .append('circle')\n          .attr('transform', (d) => `translate(${path.centroid(d)})`)\n          .attr('fill-opacity', 0.5)\n          .style('cursor', 'pointer')\n          .attr('pointer-events', 'all')\n          .on('mouseenter', (d) => {\n            const region = {\n              state: d.properties.st_nm,\n              district: d.properties.district || 'Unknown',\n            };\n            setRegionHighlighted(region);\n          })\n          .on('click', () => {\n            d3.event.stopPropagation();\n          })\n      )\n      .transition(t)\n      .attr('fill', caseColor(mapOption, '70'))\n      .attr('stroke', caseColor(mapOption, '70'))\n      .attr('r', (d) => mapScale(d.value));\n    /* ------------------------------*/\n\n    let meshStates = [];\n    if (mapMeta.mapType === MAP_TYPES.COUNTRY) {\n      meshStates = [\n        topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectStates]),\n      ];\n      meshStates[0].id = mapMeta.graphObjectStates;\n    }\n    let meshDistricts = [];\n    if (currentMap.view === MAP_VIEWS.DISTRICTS) {\n      // Add id to mesh\n      meshDistricts = [\n        topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectDistricts]),\n      ];\n      meshDistricts[0].id = mapMeta.graphObjectDistricts;\n    }\n\n    svg\n      .select(\n        currentMap.view === MAP_VIEWS.STATES\n          ? '.state-borders'\n          : '.district-borders'\n      )\n      .attr('fill', 'none')\n      .attr('stroke-width', function () {\n        return mapMeta.mapType === MAP_TYPES.COUNTRY &&\n          currentMap.view === MAP_VIEWS.DISTRICTS\n          ? 0\n          : width / 250;\n      })\n      .selectAll('path')\n      .data(\n        currentMap.view === MAP_VIEWS.STATES ? meshStates : meshDistricts,\n        (d) => d.id\n      )\n      .join((enter) => enter.append('path').attr('d', path))\n      .transition(t)\n      .attr('stroke', () => {\n        if (currentMap.stat === MAP_STATISTICS.ZONE) {\n          return '#00000060';\n        } else {\n          return caseColor(mapOption, '30');\n        }\n      });\n\n    svg\n      .select(\n        currentMap.view === MAP_VIEWS.STATES\n          ? '.district-borders'\n          : '.state-borders'\n      )\n      .selectAll('path')\n      .data(\n        currentMap.view === MAP_VIEWS.STATES ? meshDistricts : meshStates,\n        (d) => d.id\n      )\n      .join((enter) =>\n        enter\n          .append('path')\n          .attr('d', path)\n          .attr('fill', 'none')\n          .attr('stroke-width', width / 250)\n      )\n      .transition(t)\n      .attr('stroke', '#343a4099');\n\n    // Reset on tapping outside map\n    svg.attr('pointer-events', 'auto').on('click', () => {\n      if (mapMeta.mapType !== MAP_TYPES.STATE) {\n        setRegionHighlighted({\n          state: 'Total',\n        });\n      }\n    });\n  }, [\n    geoDataResponse.data,\n    mapMeta,\n    currentMap,\n    setRegionHighlighted,\n    changeMap,\n    isCountryLoaded,\n    mapScale,\n    statistic,\n    mapData,\n    mapOption,\n  ]);\n\n  const highlightRegionInMap = useCallback(\n    (state, district) => {\n      const svg = d3.select(svgRef.current);\n      if (currentMap.stat === MAP_STATISTICS.HOTSPOTS) {\n        svg\n          .select('.circles')\n          .selectAll('circle')\n          .attr('fill-opacity', (d) => {\n            const highlighted =\n              district &&\n              state === d.properties.st_nm &&\n              (district === d.properties.district ||\n                (district === 'Unknown' && !d.properties.district));\n            return highlighted ? 1 : 0.5;\n          });\n      } else {\n        svg\n          .select('.regions')\n          .selectAll('path')\n          .each(function (d) {\n            const highlighted =\n              district === d.properties?.district &&\n              state === d.properties.st_nm;\n            if (highlighted) this.parentNode.appendChild(this);\n            d3.select(this).attr('stroke-opacity', highlighted ? 1 : 0);\n          });\n      }\n    },\n    [currentMap.stat]\n  );\n\n  useEffect(() => {\n    if (!geoDataResponse.data) return;\n    highlightRegionInMap(regionHighlighted.state, regionHighlighted.district);\n  }, [\n    geoDataResponse.data,\n    highlightRegionInMap,\n    regionHighlighted.state,\n    regionHighlighted.district,\n    mapOption,\n  ]);\n\n  return (\n    <React.Fragment>\n      <div className=\"svg-parent fadeInUp\" style={{animationDelay: '2.5s'}}>\n        <svg id=\"chart\" preserveAspectRatio=\"xMidYMid meet\" ref={svgRef}>\n          <g className=\"regions\" />\n          <g className=\"state-borders\" />\n          {currentMap.view === MAP_VIEWS.DISTRICTS && (\n            <g className=\"district-borders\" />\n          )}\n          {currentMap.stat === MAP_STATISTICS.HOTSPOTS && (\n            <g className=\"circles\" />\n          )}\n        </svg>\n        {mapMeta.mapType === MAP_TYPES.STATE &&\n        mapData[currentMap.name]?.Unknown &&\n        mapData[currentMap.name]?.Unknown[mapOption] ? (\n          <div className=\"disclaimer\">\n            <Icon.AlertCircle />\n            {t('District-wise {{mapOption}} numbers are under reconciliation', {\n              mapOption: t(mapOption),\n            })}\n          </div>\n        ) : (\n          ''\n        )}\n      </div>\n\n      {mapScale && (\n        <MapLegend\n          mapScale={mapScale}\n          statistic={statistic}\n          mapStatistic={currentMap.stat}\n          mapOption={mapOption}\n        />\n      )}\n\n      <svg style={{position: 'absolute', height: 0}}>\n        <defs>\n          <filter id=\"balance-color\" colorInterpolationFilters=\"sRGB\">\n            <feColorMatrix\n              type=\"matrix\"\n              values=\"0.91372549  0           0            0  0.08627451\n                      0           0.91372549  0            0  0.08627451\n                      0           0           0.854901961  0  0.145098039\n                      0           0           0            1  0\"\n            />\n          </filter>\n        </defs>\n      </svg>\n    </React.Fragment>\n  );\n}\n\nexport default ChoroplethMap;\n","import ChoroplethMap from './choropleth';\nimport {testedToolTip} from './tooltips';\n\nimport {\n  MAP_META,\n  MAP_STATISTICS,\n  MAP_TYPES,\n  MAP_VIEWS,\n  STATE_CODES_REVERSE,\n  STATE_POPULATIONS,\n} from '../constants';\nimport {\n  formatDate,\n  formatNumber,\n  formatDayMonth,\n  formatLastUpdated,\n} from '../utils/commonfunctions';\n\nimport {parse} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useState, useEffect, useMemo, useCallback} from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport {Link} from 'react-router-dom';\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.regionHighlighted, currProps.regionHighlighted)) {\n    return false;\n  }\n  if (!equal(prevProps.mapOption, currProps.mapOption)) {\n    return false;\n  }\n  if (!equal(prevProps.anchor, currProps.anchor)) {\n    return false;\n  }\n  return true;\n};\n\nconst getRegionFromState = (state) => {\n  if (!state) return;\n  const region = {...state};\n  return region;\n};\n\nconst getRegionFromDistrict = (districtData, name) => {\n  if (!districtData) return;\n  const region = {...districtData};\n  return region;\n};\n\nfunction MapExplorer({\n  mapName,\n  states,\n  districts,\n  zones,\n  stateTestData,\n  regionHighlighted,\n  setRegionHighlighted,\n  anchor,\n  setAnchor,\n  mapOption,\n  setMapOption,\n  isCountryLoaded = true,\n}) {\n  const {t} = useTranslation();\n  const [currentMap, setCurrentMap] = useState({\n    name: mapName,\n    stat: MAP_STATISTICS.TOTAL,\n    view:\n      MAP_META[mapName].mapType === MAP_TYPES.COUNTRY\n        ? MAP_VIEWS.STATES\n        : MAP_VIEWS.DISTRICTS,\n  });\n  const currentMapMeta = MAP_META[currentMap.name];\n\n  const [statistic, currentMapData] = useMemo(() => {\n    let currentMapData = {};\n    let statistic = {};\n    if (currentMap.stat === MAP_STATISTICS.ZONE) {\n      const dataTypes = ['Red', 'Orange', 'Green'];\n      statistic = dataTypes.reduce((acc, dtype) => {\n        acc[dtype] = 0;\n        return acc;\n      }, {});\n      if (currentMapMeta.mapType === MAP_TYPES.COUNTRY) {\n        currentMapData = Object.keys(zones).reduce((acc1, state) => {\n          acc1[state] = Object.keys(zones[state]).reduce((acc2, district) => {\n            const zone = zones[state][district].zone;\n            if (zone) {\n              acc2[district] = zone;\n              statistic[zone] += 1;\n            }\n            return acc2;\n          }, {});\n          return acc1;\n        }, {});\n      } else if (currentMapMeta.mapType === MAP_TYPES.STATE) {\n        const state = currentMap.name;\n        currentMapData[state] = Object.keys(zones[state]).reduce(\n          (acc, district) => {\n            const zone = zones[state][district].zone;\n            if (zone) {\n              acc[district] = zone;\n              statistic[zone] += 1;\n            }\n            return acc;\n          },\n          {}\n        );\n      }\n    } else {\n      const dataTypes = ['confirmed', 'active', 'recovered', 'deceased'];\n      statistic = dataTypes.reduce((acc, dtype) => {\n        acc[dtype] = {total: 0, max: 0};\n        return acc;\n      }, {});\n      if (currentMapMeta.mapType === MAP_TYPES.COUNTRY) {\n        if (currentMap.view === MAP_VIEWS.STATES) {\n          currentMapData = states.reduce((acc, state) => {\n            acc[state.state] = {};\n            dataTypes.forEach((dtype) => {\n              let typeCount =\n                parseInt(state[dtype !== 'deceased' ? dtype : 'deaths']) || 0;\n              if (currentMap.stat === MAP_STATISTICS.PER_MILLION)\n                typeCount = (1e6 * typeCount) / STATE_POPULATIONS[state.state];\n              if (state.state !== 'Total') {\n                statistic[dtype].total += typeCount;\n                if (typeCount > statistic[dtype].max) {\n                  statistic[dtype].max = typeCount;\n                }\n              }\n              acc[state.state][dtype] = typeCount;\n            });\n            return acc;\n          }, {});\n        } else {\n          currentMapData = Object.keys(districts).reduce((acc1, state) => {\n            const districtWiseData = (districts[state] || {districtData: {}})\n              .districtData;\n            acc1[state] = Object.keys(districtWiseData).reduce(\n              (acc2, district) => {\n                acc2[district] = {};\n                dataTypes.forEach((dtype) => {\n                  const typeCount = parseInt(districtWiseData[district][dtype]);\n                  statistic[dtype].total += typeCount;\n                  if (typeCount > statistic[dtype].max) {\n                    statistic[dtype].max = typeCount;\n                  }\n                  acc2[district][dtype] = typeCount;\n                });\n                return acc2;\n              },\n              {}\n            );\n            return acc1;\n          }, {});\n        }\n      } else if (currentMapMeta.mapType === MAP_TYPES.STATE) {\n        const districtWiseData = (\n          districts[currentMap.name] || {districtData: {}}\n        ).districtData;\n        currentMapData[currentMap.name] = Object.keys(districtWiseData).reduce(\n          (acc, district) => {\n            acc[district] = {};\n            dataTypes.forEach((dtype) => {\n              const typeCount = parseInt(districtWiseData[district][dtype]);\n              statistic[dtype].total += typeCount;\n              if (typeCount > statistic[dtype].max) {\n                statistic[dtype].max = typeCount;\n              }\n              acc[district][dtype] = typeCount;\n            });\n            return acc;\n          },\n          {}\n        );\n        currentMapData[currentMap.name].Total = {};\n        const stateData = states.find(\n          (state) => currentMap.name === state.state\n        );\n        dataTypes.forEach((dtype) => {\n          currentMapData[currentMap.name].Total[dtype] =\n            parseInt(stateData[dtype !== 'deceased' ? dtype : 'deaths']) || 0;\n        });\n      }\n    }\n    return [statistic, currentMapData];\n  }, [currentMap, currentMapMeta.mapType, districts, zones, states]);\n\n  const [hoveredRegion, panelRegion] = useMemo(() => {\n    if (!regionHighlighted.district) {\n      const state = getRegionFromState(\n        states.find((state) => regionHighlighted.state === state.state)\n      );\n      return [state, state];\n    } else {\n      const stateDistrictObj = districts[regionHighlighted.state] || {\n        districtData: {},\n      };\n      const districtData = stateDistrictObj.districtData[\n        regionHighlighted.district\n      ] || {\n        confirmed: 0,\n        active: 0,\n        recovered: 0,\n        deaths: 0,\n      };\n      const district = getRegionFromDistrict(\n        districtData,\n        regionHighlighted.district\n      );\n      let state = getRegionFromState(\n        states.find((state) => state.state === regionHighlighted.state)\n      );\n      district.district = regionHighlighted.district;\n      district.state = state.state;\n      if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\n        state = states.find((state) => state.state === 'Total');\n      return [district, state];\n    }\n  }, [\n    states,\n    districts,\n    currentMapMeta.mapType,\n    regionHighlighted.state,\n    regionHighlighted.district,\n  ]);\n\n  useEffect(() => {\n    if (regionHighlighted.district) {\n      if (\n        currentMap.name !== regionHighlighted.state &&\n        !(\n          currentMapMeta.mapType === MAP_TYPES.COUNTRY &&\n          currentMap.view === MAP_VIEWS.DISTRICTS\n        )\n      ) {\n        const state = regionHighlighted.state;\n        const newMapMeta = MAP_META[state];\n        if (!newMapMeta) {\n          return;\n        }\n        setCurrentMap({\n          name: state,\n          view: MAP_VIEWS.DISTRICTS,\n          stat:\n            currentMap.stat === MAP_STATISTICS.PER_MILLION\n              ? MAP_STATISTICS.TOTAL\n              : currentMap.stat,\n        });\n      }\n    } else if (isCountryLoaded && currentMapMeta.mapType === MAP_TYPES.STATE) {\n      setCurrentMap({\n        name: 'India',\n        view:\n          currentMap.stat === MAP_STATISTICS.ZONE\n            ? MAP_VIEWS.DISTRICTS\n            : MAP_VIEWS.STATES,\n        stat: currentMap.stat,\n      });\n    }\n  }, [\n    isCountryLoaded,\n    regionHighlighted.state,\n    regionHighlighted.district,\n    currentMap,\n    currentMapMeta.mapType,\n  ]);\n\n  const switchMapToState = useCallback(\n    (state) => {\n      const newMapMeta = MAP_META[state];\n      if (!newMapMeta) {\n        return;\n      }\n      if (newMapMeta.mapType === MAP_TYPES.STATE) {\n        const {districtData} = districts[state] || {\n          districtData: {},\n        };\n        const topDistrict = Object.keys(districtData)\n          .filter((state) => state !== 'Unknown')\n          .sort((a, b) => {\n            return districtData[b].confirmed - districtData[a].confirmed;\n          })[0];\n        ReactDOM.unstable_batchedUpdates(() => {\n          setRegionHighlighted({\n            district: topDistrict,\n            state: state,\n          });\n          setCurrentMap({\n            name: state,\n            view: MAP_VIEWS.DISTRICTS,\n            stat:\n              currentMap.stat === MAP_STATISTICS.PER_MILLION\n                ? MAP_STATISTICS.TOTAL\n                : currentMap.stat,\n          });\n        });\n      } else {\n        ReactDOM.unstable_batchedUpdates(() => {\n          setCurrentMap({\n            name: 'India',\n            view:\n              currentMap.stat === MAP_STATISTICS.ZONE\n                ? MAP_VIEWS.DISTRICTS\n                : MAP_VIEWS.STATES,\n            stat: currentMap.stat,\n          });\n          setRegionHighlighted({\n            state: 'Total',\n          });\n        });\n      }\n    },\n    [currentMap.stat, districts, setRegionHighlighted]\n  );\n\n  const testObj = stateTestData[panelRegion.state];\n\n  let hoveredRegionCount;\n  let hoveredRegionZone;\n  if (currentMap.stat !== MAP_STATISTICS.ZONE) {\n    const data =\n      hoveredRegion.district && currentMapData[hoveredRegion.state]\n        ? currentMapData[hoveredRegion.state][hoveredRegion.district]\n        : hoveredRegion.state !== currentMap.name\n        ? currentMapData[hoveredRegion.state]\n        : currentMapData[hoveredRegion.state].Total;\n    hoveredRegionCount = data\n      ? currentMap.stat === MAP_STATISTICS.PER_MILLION\n        ? Number(parseFloat(data[mapOption]).toFixed(2))\n        : data[mapOption]\n      : 0;\n  } else {\n    hoveredRegionZone =\n      zones[hoveredRegion.state] &&\n      zones[hoveredRegion.state][hoveredRegion.district]\n        ? zones[hoveredRegion.state][hoveredRegion.district].zone\n        : '';\n  }\n\n  return (\n    <div\n      className={`MapExplorer fadeInUp ${\n        anchor === 'mapexplorer' ? 'stickied' : ''\n      }`}\n      style={{\n        animationDelay: '1.5s',\n        display: anchor === 'timeseries' ? 'none' : '',\n      }}\n    >\n      {window.innerWidth > 769 && (\n        <div\n          className={`anchor ${anchor === 'mapexplorer' ? 'stickied' : ''}`}\n          onClick={() => {\n            setAnchor(anchor === 'mapexplorer' ? null : 'mapexplorer');\n          }}\n        >\n          <Icon.Anchor />\n        </div>\n      )}\n      <div className=\"header\">\n        <h1>\n          {t(currentMap.name)} {t('Map')}\n        </h1>\n        <h6>\n          {t('{{action}} over a {{mapType}} for more details', {\n            action: t(window.innerWidth <= 769 ? 'Tap' : 'Hover'),\n            mapType: t(\n              currentMapMeta.mapType === MAP_TYPES.COUNTRY\n                ? 'state/UT'\n                : 'District'\n            ),\n          })}\n        </h6>\n      </div>\n\n      <div className=\"map-stats\">\n        <div\n          className={`stats fadeInUp ${\n            mapOption === 'confirmed' ? 'focused' : ''\n          }`}\n          style={{animationDelay: '2s'}}\n          onClick={() => setMapOption('confirmed')}\n        >\n          <h5>{window.innerWidth <= 769 ? t('Cnfmd') : t('Confirmed')}</h5>\n          <div className=\"stats-bottom\">\n            <h1>{formatNumber(panelRegion.confirmed)}</h1>\n            <h6>{`+${formatNumber(panelRegion.deltaconfirmed)}`}</h6>\n          </div>\n        </div>\n\n        <div\n          className={`stats is-blue fadeInUp ${\n            mapOption === 'active' ? 'focused' : ''\n          }`}\n          style={{animationDelay: '2.1s'}}\n          onClick={() => setMapOption('active')}\n        >\n          <h5>{window.innerWidth <= 769 ? t('Actv') : t('Active')}</h5>\n          <div className=\"stats-bottom\">\n            <h1>{formatNumber(panelRegion.active)}</h1>\n            <h6>{` `}</h6>\n          </div>\n        </div>\n\n        <div\n          className={`stats is-green fadeInUp ${\n            mapOption === 'recovered' ? 'focused' : ''\n          }`}\n          style={{animationDelay: '2.2s'}}\n          onClick={() => setMapOption('recovered')}\n        >\n          <h5>{window.innerWidth <= 769 ? t('Rcvrd') : t('Recovered')}</h5>\n          <div className=\"stats-bottom\">\n            <h1>{formatNumber(panelRegion.recovered)}</h1>\n            <h6>{`+${formatNumber(panelRegion.deltarecovered)}`}</h6>\n          </div>\n        </div>\n\n        <div\n          className={`stats is-gray fadeInUp ${\n            mapOption === 'deceased' ? 'focused' : ''\n          }`}\n          style={{animationDelay: '2.3s'}}\n          onClick={() => setMapOption('deceased')}\n        >\n          <h5>{window.innerWidth <= 769 ? t('Dcsd') : t('Deceased')}</h5>\n          <div className=\"stats-bottom\">\n            <h1>{formatNumber(panelRegion.deaths)}</h1>\n            <h6>{`+${formatNumber(panelRegion.deltadeaths)}`}</h6>\n          </div>\n        </div>\n\n        <div\n          className=\"stats is-purple tested fadeInUp\"\n          style={{animationDelay: '2.4s'}}\n        >\n          <h5>{t('Tested')}</h5>\n          <div className=\"stats-bottom\">\n            <h1>{formatNumber(testObj?.totaltested)}</h1>\n          </div>\n          <h6 className=\"timestamp\">\n            {!isNaN(parse(testObj?.updatedon, 'dd/MM/yyyy', new Date()))\n              ? t('As of {{date}}', {\n                  date: formatDayMonth(testObj?.updatedon),\n                })\n              : ''}\n          </h6>\n          {testObj?.totaltested?.length > 1 && (\n            <a href={testObj.source} target=\"_noblank\">\n              <Icon.Link />\n            </a>\n          )}\n          {panelRegion.state === 'Total' ? testedToolTip : ''}\n        </div>\n      </div>\n\n      <div className=\"meta fadeInUp\" style={{animationDelay: '2.4s'}}>\n        <h2\n          className={`${\n            currentMap.stat !== MAP_STATISTICS.ZONE\n              ? mapOption !== 'confirmed'\n                ? mapOption\n                : ''\n              : hoveredRegionZone\n          }`}\n        >\n          {hoveredRegion.district\n            ? t(hoveredRegion.district) +\n              (hoveredRegion.district === 'Unknown'\n                ? ` (${t(hoveredRegion.state)})`\n                : '')\n            : t(hoveredRegion.state)}\n        </h2>\n\n        {currentMapMeta.mapType !== MAP_TYPES.STATE &&\n          panelRegion.lastupdatedtime && (\n            <div className=\"last-update\">\n              <h6>{t('Last updated')}</h6>\n              <h3>\n                {isNaN(Date.parse(formatDate(panelRegion.lastupdatedtime)))\n                  ? ''\n                  : formatLastUpdated(panelRegion.lastupdatedtime) +\n                    ' ' +\n                    t('ago')}\n              </h3>\n            </div>\n          )}\n\n        {currentMapMeta.mapType === MAP_TYPES.STATE ? (\n          <Link to={`state/${STATE_CODES_REVERSE[panelRegion.state]}`}>\n            <div className=\"button state-page-button\">\n              <abbr>{t('Visit state page')}</abbr>\n              <Icon.ArrowRightCircle />\n            </div>\n          </Link>\n        ) : null}\n\n        {currentMap.stat !== MAP_STATISTICS.ZONE &&\n        (currentMapMeta.mapType === MAP_TYPES.STATE ||\n          (currentMapMeta.mapType === MAP_TYPES.COUNTRY &&\n            currentMap.stat !== MAP_STATISTICS.TOTAL)) &&\n        (currentMap.stat !== MAP_STATISTICS.HOTSPOTS ||\n          hoveredRegion?.district) ? (\n          <h1\n            className={`district ${mapOption !== 'confirmed' ? mapOption : ''}`}\n          >\n            {hoveredRegionCount}\n            <br />\n            <span>\n              {t(mapOption)}{' '}\n              {currentMap.stat === MAP_STATISTICS.PER_MILLION\n                ? ` ${t('per million')}`\n                : ''}\n            </span>\n          </h1>\n        ) : null}\n\n        {currentMapMeta.mapType === MAP_TYPES.STATE ? (\n          <div\n            className=\"button back-button\"\n            onClick={() => switchMapToState('India')}\n          >\n            {t('Back')}\n          </div>\n        ) : null}\n\n        {currentMapMeta.mapType === MAP_TYPES.STATE &&\n        currentMapData.Unknown &&\n        currentMapData.Unknown[mapOption] > 0 ? (\n          <h4 className=\"unknown\">\n            {t('Districts unknown for')} {currentMapData.Unknown[mapOption]}{' '}\n            {t('people')}\n          </h4>\n        ) : null}\n      </div>\n\n      <div>\n        {mapOption && (\n          <ChoroplethMap\n            statistic={statistic}\n            currentMap={currentMap}\n            mapData={currentMapData}\n            regionHighlighted={regionHighlighted}\n            setRegionHighlighted={setRegionHighlighted}\n            changeMap={switchMapToState}\n            mapOption={mapOption}\n            isCountryLoaded={isCountryLoaded}\n          />\n        )}\n      </div>\n\n      <div className=\"tabs-map\">\n        <div\n          className={`tab ${\n            currentMap.stat === MAP_STATISTICS.TOTAL ? 'focused' : ''\n          }`}\n          onClick={() => {\n            setCurrentMap({\n              name: currentMap.name,\n              view:\n                currentMapMeta.mapType === MAP_TYPES.COUNTRY\n                  ? MAP_VIEWS.STATES\n                  : MAP_VIEWS.DISTRICTS,\n              stat: MAP_STATISTICS.TOTAL,\n            });\n            if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\n              setRegionHighlighted({\n                state: regionHighlighted.state,\n              });\n          }}\n        >\n          <h4>{t('Total Cases')}</h4>\n        </div>\n        {isCountryLoaded && (\n          <div\n            className={`tab ${\n              currentMap.stat === MAP_STATISTICS.PER_MILLION ? 'focused' : ''\n            }`}\n            onClick={() => {\n              if (currentMapMeta.mapType === MAP_TYPES.STATE) return;\n              setCurrentMap({\n                name: currentMap.name,\n                view: MAP_VIEWS.STATES,\n                stat: MAP_STATISTICS.PER_MILLION,\n              });\n              setRegionHighlighted({\n                state: regionHighlighted.state,\n              });\n            }}\n          >\n            <h4>\n              {t('Cases per million')}\n              <sup>&dagger;</sup>\n            </h4>\n          </div>\n        )}\n        {isCountryLoaded && (\n          <div\n            className={`tab ${\n              currentMap.stat === MAP_STATISTICS.HOTSPOTS ? 'focused' : ''\n            }`}\n            onClick={() => {\n              if (currentMapMeta.mapType === MAP_TYPES.STATE) return;\n              setCurrentMap({\n                name: currentMap.name,\n                view: MAP_VIEWS.DISTRICTS,\n                stat: MAP_STATISTICS.HOTSPOTS,\n              });\n            }}\n          >\n            <h4>{t('Hotspots')}</h4>\n          </div>\n        )}\n        <div\n          className={`tab ${\n            currentMap.stat === MAP_STATISTICS.ZONE ? 'focused' : ''\n          }`}\n          onClick={() => {\n            setCurrentMap({\n              name: currentMap.name,\n              view: MAP_VIEWS.DISTRICTS,\n              stat: MAP_STATISTICS.ZONE,\n            });\n            if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\n              setRegionHighlighted({\n                state: 'Total',\n              });\n          }}\n        >\n          <h4>{t('Zones')}</h4>\n        </div>\n      </div>\n\n      <h6 className=\"footnote table-fineprint\">\n        &dagger; {t('Based on 2019 population projection by NCP') + ' ('}\n        <a\n          href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n          target=\"_noblank\"\n          style={{color: '#6c757d'}}\n        >\n          {t('source')}\n        </a>\n        )\n      </h6>\n    </div>\n  );\n}\n\nexport default React.memo(MapExplorer, isEqual);\n","import {testedToolTip} from './tooltips';\n\nimport {\n  sliceTimeseriesFromEnd,\n  formatNumber,\n  formatTimeseriesDate,\n  formatTimeseriesTickX,\n} from '../utils/commonfunctions';\nimport {useResizeObserver} from '../utils/hooks';\n\nimport * as d3 from 'd3';\nimport {addDays, subDays} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useState, useEffect, useRef, useCallback} from 'react';\nimport {useTranslation} from 'react-i18next';\n\nconst isEqual = (prevProps, currProps) => {\n  if (!currProps.isIntersecting) return true;\n  if (!prevProps.isIntersecting) return false;\n  if (!equal(currProps.chartType, prevProps.chartType)) {\n    return false;\n  }\n  if (!equal(currProps.mode, prevProps.mode)) {\n    return false;\n  }\n  if (!equal(currProps.logMode, prevProps.logMode)) {\n    return false;\n  }\n  if (!equal(currProps.stateCode, prevProps.stateCode)) {\n    return false;\n  }\n  return true;\n};\n\nfunction TimeSeries({timeseriesProp, chartType, mode, logMode, stateCode}) {\n  const {t} = useTranslation();\n  const [lastDaysCount, setLastDaysCount] = useState(\n    window.innerWidth > 512 ? Infinity : 30\n  );\n  const [timeseries, setTimeseries] = useState({});\n  const [datapoint, setDatapoint] = useState({});\n  const [index, setIndex] = useState(0);\n  const [moving, setMoving] = useState(false);\n\n  const svgRef1 = useRef();\n  const svgRef2 = useRef();\n  const svgRef3 = useRef();\n  const svgRef4 = useRef();\n  const svgRef5 = useRef();\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const transformTimeSeries = useCallback(\n    (timeseries) => {\n      if (timeseries.length > 1) {\n        const slicedTimeseries = sliceTimeseriesFromEnd(\n          timeseries,\n          lastDaysCount\n        );\n        setIndex(slicedTimeseries.length - 1);\n        setTimeseries(slicedTimeseries);\n      }\n    },\n    [lastDaysCount]\n  );\n\n  useEffect(() => {\n    transformTimeSeries(timeseriesProp);\n  }, [lastDaysCount, timeseriesProp, transformTimeSeries]);\n\n  const graphData = useCallback(\n    (timeseries) => {\n      const {width, height} =\n        dimensions || wrapperRef.current.getBoundingClientRect();\n\n      // Margins\n      const margin = {top: 15, right: 35, bottom: 25, left: 25};\n      const chartRight = width - margin.right;\n      const chartBottom = height - margin.bottom;\n\n      const T = timeseries.length;\n      const yBufferTop = 1.2;\n      const yBufferBottom = 1.1;\n\n      setDatapoint(timeseries[T - 1]);\n      setIndex(T - 1);\n\n      const svg1 = d3.select(svgRef1.current);\n      const svg2 = d3.select(svgRef2.current);\n      const svg3 = d3.select(svgRef3.current);\n      const svg4 = d3.select(svgRef4.current);\n      const svg5 = d3.select(svgRef5.current);\n\n      const dateMin = subDays(timeseries[0].date, 1);\n      const dateMax = addDays(timeseries[T - 1].date, 1);\n\n      const xScale = d3\n        .scaleTime()\n        .clamp(true)\n        .domain([dateMin, dateMax])\n        .range([margin.left, chartRight]);\n\n      // Number of x-axis ticks\n      const numTicksX = width < 480 ? 4 : 7;\n\n      const xAxis = (g) =>\n        g.attr('class', 'x-axis').call(\n          d3\n            .axisBottom(xScale)\n            .ticks(numTicksX)\n            .tickFormat((tick) => {\n              return formatTimeseriesTickX(tick);\n            })\n        );\n\n      const xAxis2 = (g, yScale) => {\n        g.attr('class', 'x-axis2')\n          .call(d3.axisBottom(xScale).tickValues([]).tickSize(0))\n          .select('.domain')\n          .style('transform', `translateY(${yScale(0)}px)`);\n\n        if (yScale(0) !== chartBottom) g.select('.domain').attr('opacity', 0.4);\n        else g.select('.domain').attr('opacity', 0);\n      };\n\n      const yAxis = (g, yScale) =>\n        g\n          .attr('class', 'y-axis')\n          .call(d3.axisRight(yScale).ticks(4, '0~s').tickPadding(5));\n\n      // Arrays of objects\n      const plotTotal = chartType === 1;\n      const dataTypesTotal = [\n        'totalconfirmed',\n        'totalactive',\n        'totalrecovered',\n        'totaldeceased',\n        'totaltested',\n      ];\n      const dataTypesDaily = [\n        'dailyconfirmed',\n        'dailyactive',\n        'dailyrecovered',\n        'dailydeceased',\n        'dailytested',\n      ];\n\n      const colors = ['#ff073a', '#007bff', '#28a745', '#6c757d', '#201aa2'];\n\n      const svgArray = [svg1, svg2, svg3, svg4, svg5];\n\n      let yScales;\n      if (plotTotal) {\n        const uniformScaleMin = d3.min(timeseries, (d) =>\n          Math.min(d.totalactive, d.totalrecovered, d.totaldeceased)\n        );\n        const uniformScaleMax = d3.max(timeseries, (d) => d.totalconfirmed);\n        const yScaleUniformLinear = d3\n          .scaleLinear()\n          .clamp(true)\n          .domain([uniformScaleMin, Math.max(1, yBufferTop * uniformScaleMax)])\n          .nice()\n          .range([chartBottom, margin.top]);\n\n        const yScaleUniformLog = d3\n          .scaleLog()\n          .clamp(true)\n          .domain([\n            Math.max(1, uniformScaleMin),\n            Math.max(10, yBufferTop * uniformScaleMax),\n          ])\n          .nice()\n          .range([chartBottom, margin.top]);\n\n        yScales = dataTypesTotal.map((type) => {\n          const yScaleLinear = d3\n            .scaleLinear()\n            .clamp(true)\n            .domain([\n              d3.min(timeseries, (d) => d[type]),\n              Math.max(1, yBufferTop * d3.max(timeseries, (d) => d[type])),\n            ])\n            .nice()\n            .range([chartBottom, margin.top]);\n          const yScaleLog = d3\n            .scaleLog()\n            .clamp(true)\n            .domain([\n              Math.max(\n                1,\n                d3.min(timeseries, (d) => d[type])\n              ),\n              Math.max(10, yBufferTop * d3.max(timeseries, (d) => d[type])),\n            ])\n            .nice()\n            .range([chartBottom, margin.top]);\n          if (mode && type !== 'totaltested')\n            return logMode ? yScaleUniformLog : yScaleUniformLinear;\n          else return logMode ? yScaleLog : yScaleLinear;\n        });\n      } else {\n        const yScaleDailyUniform = d3\n          .scaleLinear()\n          .clamp(true)\n          .domain([\n            yBufferBottom *\n              Math.min(\n                0,\n                d3.min(timeseries, (d) => d.dailyactive)\n              ),\n            Math.max(\n              1,\n              yBufferTop *\n                d3.max(timeseries, (d) =>\n                  Math.max(d.dailyconfirmed, d.dailyrecovered, d.dailydeceased)\n                )\n            ),\n          ])\n          .nice()\n          .range([chartBottom, margin.top]);\n\n        yScales = dataTypesDaily.map((type) => {\n          if (mode && type !== 'dailytested') return yScaleDailyUniform;\n          const yScaleLinear = d3\n            .scaleLinear()\n            .clamp(true)\n            .domain([\n              yBufferBottom *\n                Math.min(\n                  0,\n                  d3.min(timeseries, (d) => d[type])\n                ),\n              Math.max(1, yBufferTop * d3.max(timeseries, (d) => d[type])),\n            ])\n            .nice()\n            .range([chartBottom, margin.top]);\n          return yScaleLinear;\n        });\n      }\n\n      /* Focus dots */\n      const focus = svgArray.map((svg, i) => {\n        return svg\n          .selectAll('.focus')\n          .data([timeseries[T - 1]], (d) => d.date)\n          .join((enter) =>\n            enter.append('circle').attr('cx', (d) => xScale(d.date))\n          )\n          .attr('class', 'focus')\n          .attr('fill', colors[i])\n          .attr('stroke', colors[i])\n          .attr('r', 4);\n      });\n\n      function mousemove() {\n        const xm = d3.mouse(this)[0];\n        const date = xScale.invert(xm);\n        const bisectDate = d3.bisector((d) => d.date).left;\n        let i = bisectDate(timeseries, date, 1);\n        if (0 <= i && i < T) {\n          if (date - timeseries[i - 1].date < timeseries[i].date - date) --i;\n          setDatapoint(timeseries[i]);\n          setIndex(i);\n          setMoving(true);\n          const d = timeseries[i];\n          focus.forEach((f, j) => {\n            const yScale = yScales[j];\n            const type = plotTotal ? dataTypesTotal[j] : dataTypesDaily[j];\n            if (!isNaN(d[type]))\n              f.attr('cx', xScale(d.date))\n                .attr('cy', yScale(d[type]))\n                .attr('opacity', 1);\n            else f.attr('opacity', 0);\n          });\n        }\n      }\n\n      function mouseout() {\n        setDatapoint(timeseries[T - 1]);\n        setIndex(T - 1);\n        setMoving(false);\n        focus.forEach((f, j) => {\n          const yScale = yScales[j];\n          const type = plotTotal ? dataTypesTotal[j] : dataTypesDaily[j];\n          if (!isNaN(timeseries[T - 1][type]))\n            f.attr('cx', xScale(timeseries[T - 1].date))\n              .attr('cy', yScale(timeseries[T - 1][type]))\n              .attr('opacity', 1);\n          else f.attr('opacity', 0);\n        });\n      }\n\n      /* Begin drawing charts */\n      svgArray.forEach((svg, i) => {\n        // Transition interval\n        const t = svg.transition().duration(500);\n        const typeTotal = dataTypesTotal[i];\n        const typeDaily = dataTypesDaily[i];\n        const type = plotTotal ? typeTotal : typeDaily;\n\n        const filteredTimeseries = timeseries.filter((d) => !isNaN(d[type]));\n        const color = colors[i];\n        const yScale = yScales[i];\n\n        /* X axis */\n        svg\n          .select('.x-axis')\n          .style('transform', `translateY(${chartBottom}px)`)\n          .transition(t)\n          .call(xAxis);\n        svg.select('.x-axis2').transition(t).call(xAxis2, yScale);\n        /* Y axis */\n        svg\n          .select('.y-axis')\n          .style('transform', `translateX(${chartRight}px)`)\n          .transition(t)\n          .call(yAxis, yScale);\n\n        /* Path dots */\n        svg\n          .selectAll('.dot')\n          .data(filteredTimeseries, (d) => d.date)\n          .join((enter) =>\n            enter\n              .append('circle')\n              .attr('cy', chartBottom)\n              .attr('cx', (d) => xScale(d.date))\n          )\n          .attr('class', 'dot')\n          .attr('fill', color)\n          .attr('stroke', color)\n          .attr('r', 2)\n          .transition(t)\n          .attr('cx', (d) => xScale(d.date))\n          .attr('cy', (d) => yScale(d[type]));\n\n        if (!isNaN(timeseries[T - 1][type]))\n          focus[i]\n            .transition(t)\n            .attr('cx', (d) => xScale(d.date))\n            .attr('cy', (d) => yScale(d[type]))\n            .attr('opacity', 1);\n        else focus[i].transition(t).attr('opacity', 0);\n\n        if (plotTotal) {\n          /* TOTAL TRENDS */\n          svg.selectAll('.stem').remove();\n          const path = svg\n            .selectAll('.trend')\n            .data([[...filteredTimeseries].reverse()])\n            .join('path')\n            .attr('class', 'trend')\n            .attr('fill', 'none')\n            .attr('stroke', color + '99')\n            .attr('stroke-width', 4);\n          // HACK\n          // Path interpolation is non-trivial. Ideally, a custom path tween\n          // function should be defined which takes care that old path dots\n          // transition synchronously along with the path transition. This hack\n          // simulates that behaviour.\n          if (path.attr('d')) {\n            const n = path.node().getTotalLength();\n            const p = path.node().getPointAtLength(n);\n            // Append points at end of path for better interpolation\n            path.attr(\n              'd',\n              () => path.attr('d') + `L${p.x},${p.y}`.repeat(3 * T)\n            );\n          }\n          path\n            .transition(t)\n            .attr('opacity', plotTotal ? 1 : 0)\n            .attr(\n              'd',\n              d3\n                .line()\n                .x((d) => xScale(d.date))\n                .y((d) => yScale(d[typeTotal]))\n                .curve(d3.curveMonotoneX)\n            );\n        } else {\n          /* DAILY TRENDS */\n          svg.selectAll('.trend').remove();\n          svg\n            .selectAll('.stem')\n            .data(filteredTimeseries, (d) => d.date)\n            .join((enter) =>\n              enter\n                .append('line')\n                .attr('x1', (d) => xScale(d.date))\n                .attr('y1', chartBottom)\n                .attr('x2', (d) => xScale(d.date))\n                .attr('y2', chartBottom)\n            )\n            .attr('class', 'stem')\n            .style('stroke', color + '99')\n            .style('stroke-width', 4)\n            .transition(t)\n            .attr('x1', (d) => xScale(d.date))\n            .attr('y1', yScale(0))\n            .attr('x2', (d) => xScale(d.date))\n            .attr('y2', (d) => yScale(d[typeDaily]));\n        }\n\n        svg\n          .on('mousemove', mousemove)\n          .on('touchmove', mousemove)\n          .on('mouseout', mouseout)\n          .on('touchend', mouseout);\n      });\n    },\n    [chartType, dimensions, logMode, mode]\n  );\n\n  useEffect(() => {\n    if (timeseries.length > 1) {\n      graphData(timeseries);\n    }\n  }, [timeseries, graphData]);\n\n  const dateStr = datapoint.date ? formatTimeseriesDate(datapoint.date) : '';\n\n  const chartKey1 = chartType === 1 ? 'totalconfirmed' : 'dailyconfirmed';\n  const chartKey2 = chartType === 1 ? 'totalactive' : 'dailyactive';\n  const chartKey3 = chartType === 1 ? 'totalrecovered' : 'dailyrecovered';\n  const chartKey4 = chartType === 1 ? 'totaldeceased' : 'dailydeceased';\n  const chartKey5 = chartType === 1 ? 'totaltested' : 'dailytested';\n\n  // Function for calculate increased/decreased count for each type of data\n  const currentStatusCount = (chartType) => {\n    if (timeseries.length <= 0 || index <= 0 || index >= timeseries.length)\n      return '';\n    const currentDiff =\n      timeseries[index][chartType] - timeseries[index - 1][chartType];\n    const formatedDiff = formatNumber(currentDiff);\n    return currentDiff >= 0 ? `+${formatedDiff}` : formatedDiff;\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"TimeSeries fadeInUp\" style={{animationDelay: '2.7s'}}>\n        <div className=\"svg-parent\" ref={wrapperRef}>\n          <div className=\"stats\">\n            <h5 className={`${!moving ? 'title' : ''}`}>{t('Confirmed')}</h5>\n            <h5 className={`${moving ? 'title' : ''}`}>{`${dateStr}`}</h5>\n            <div className=\"stats-bottom\">\n              <h2>{formatNumber(datapoint[chartKey1])}</h2>\n              <h6>{currentStatusCount(chartKey1)}</h6>\n            </div>\n          </div>\n          <svg ref={svgRef1} preserveAspectRatio=\"xMidYMid meet\">\n            <g className=\"x-axis\" />\n            <g className=\"x-axis2\" />\n            <g className=\"y-axis\" />\n          </svg>\n        </div>\n\n        <div className=\"svg-parent is-blue\">\n          <div className=\"stats is-blue\">\n            <h5 className={`${!moving ? 'title' : ''}`}>{t('Active')}</h5>\n            <h5 className={`${moving ? 'title' : ''}`}>{`${dateStr}`}</h5>\n            <div className=\"stats-bottom\">\n              <h2>{formatNumber(datapoint[chartKey2])}</h2>\n              <h6>{currentStatusCount(chartKey2)}</h6>\n            </div>\n          </div>\n          <svg ref={svgRef2} preserveAspectRatio=\"xMidYMid meet\">\n            <g className=\"x-axis\" />\n            <g className=\"x-axis2\" />\n            <g className=\"y-axis\" />\n          </svg>\n        </div>\n\n        <div className=\"svg-parent is-green\">\n          <div className=\"stats is-green\">\n            <h5 className={`${!moving ? 'title' : ''}`}>{t('Recovered')}</h5>\n            <h5 className={`${moving ? 'title' : ''}`}>{`${dateStr}`}</h5>\n            <div className=\"stats-bottom\">\n              <h2>{formatNumber(datapoint[chartKey3])}</h2>\n              <h6>{currentStatusCount(chartKey3)}</h6>\n            </div>\n          </div>\n          <svg ref={svgRef3} preserveAspectRatio=\"xMidYMid meet\">\n            <g className=\"x-axis\" />\n            <g className=\"x-axis2\" />\n            <g className=\"y-axis\" />\n          </svg>\n        </div>\n\n        <div className=\"svg-parent is-gray\">\n          <div className=\"stats is-gray\">\n            <h5 className={`${!moving ? 'title' : ''}`}>{t('Deceased')}</h5>\n            <h5 className={`${moving ? 'title' : ''}`}>{`${dateStr}`}</h5>\n            <div className=\"stats-bottom\">\n              <h2>{formatNumber(datapoint[chartKey4])}</h2>\n              <h6>{currentStatusCount(chartKey4)}</h6>\n            </div>\n          </div>\n          <svg ref={svgRef4} preserveAspectRatio=\"xMidYMid meet\">\n            <g className=\"x-axis\" />\n            <g className=\"x-axis2\" />\n            <g className=\"y-axis\" />\n          </svg>\n        </div>\n\n        <div className=\"svg-parent is-purple\">\n          <div className=\"stats is-purple\">\n            <h5 className={`${!moving ? 'title' : ''}`}>\n              {t('Tested')} {stateCode === 'TT' ? testedToolTip : ''}\n            </h5>\n            <h5 className={`${moving ? 'title' : ''}`}>{`${dateStr}`}</h5>\n            <div className=\"stats-bottom\">\n              <h2>{formatNumber(datapoint[chartKey5])}</h2>\n              <h6>{currentStatusCount(chartKey5)}</h6>\n            </div>\n          </div>\n          <svg ref={svgRef5} preserveAspectRatio=\"xMidYMid meet\">\n            <g className=\"x-axis\" />\n            <g className=\"x-axis2\" />\n            <g className=\"y-axis\" />\n          </svg>\n        </div>\n      </div>\n\n      <div className=\"pills\">\n        <button\n          type=\"button\"\n          onClick={() => setLastDaysCount(Infinity)}\n          className={lastDaysCount === Infinity ? 'selected' : ''}\n        >\n          {t('Beginning')}\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => setLastDaysCount(30)}\n          className={lastDaysCount === 30 ? 'selected' : ''}\n          aria-label=\"1 month\"\n        >\n          {`1 ${t('Month')}`}\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => setLastDaysCount(14)}\n          className={lastDaysCount === 14 ? 'selected' : ''}\n          aria-label=\"14 days\"\n        >\n          {`2 ${t('Weeks')}`}\n        </button>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default React.memo(TimeSeries, isEqual);\n","import TimeSeries from './timeseries';\n\nimport 'intersection-observer';\nimport Observer from '@researchgate/react-intersection-observer';\nimport equal from 'fast-deep-equal';\nimport React, {useState} from 'react';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport {useLocalStorage} from 'react-use';\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.activeStateCode, prevProps.activeStateCode)) {\n    return false;\n  }\n  if (!equal(currProps.anchor, prevProps.anchor)) {\n    return false;\n  }\n  return true;\n};\n\nfunction TimeSeriesExplorer({\n  timeseries,\n  activeStateCode,\n  onHighlightState,\n  states,\n  anchor,\n  setAnchor,\n}) {\n  const [chartType, setChartType] = useLocalStorage('timeseriesChartType', 1);\n  const [isTimeseriesIntersecting, setIsTimeseriesIntersecting] = useState(\n    false\n  );\n\n  const [timeseriesMode, setTimeseriesMode] = useLocalStorage(\n    'timeseriesMode',\n    true\n  );\n  const [timeseriesLogMode, setTimeseriesLogMode] = useLocalStorage(\n    'timeseriesLogMode',\n    false\n  );\n  const {t} = useTranslation();\n\n  const options = {\n    rootMargin: '0px 0px 0px 0px',\n  };\n\n  return (\n    <Observer\n      options={options}\n      onChange={({isIntersecting}) =>\n        setIsTimeseriesIntersecting(isIntersecting)\n      }\n    >\n      <div\n        className={`TimeSeriesExplorer ${\n          anchor === 'timeseries' ? 'stickied' : ''\n        }`}\n        style={{display: anchor === 'mapexplorer' ? 'none' : ''}}\n      >\n        <div\n          className=\"timeseries-header fadeInUp\"\n          style={{animationDelay: '2.5s'}}\n        >\n          {window.innerWidth > 769 && anchor !== undefined && (\n            <div\n              className={`anchor ${anchor === 'timeseries' ? 'stickied' : ''}`}\n              onClick={() => {\n                setAnchor(anchor === 'timeseries' ? null : 'timeseries');\n              }}\n            >\n              <Icon.Anchor />\n            </div>\n          )}\n\n          <h1>{t('Spread Trends')}</h1>\n          <div className=\"tabs\">\n            <div\n              className={`tab ${chartType === 1 ? 'focused' : ''}`}\n              onClick={() => {\n                setChartType(1);\n              }}\n            >\n              <h4>{t('Cumulative')}</h4>\n            </div>\n            <div\n              className={`tab ${chartType === 2 ? 'focused' : ''}`}\n              onClick={() => {\n                setChartType(2);\n              }}\n            >\n              <h4>{t('Daily')}</h4>\n            </div>\n          </div>\n\n          <div className=\"scale-modes\">\n            <label className=\"main\">{t('Scale Modes')}</label>\n            <div className=\"timeseries-mode\">\n              <label htmlFor=\"timeseries-mode\">{t('Uniform')}</label>\n              <input\n                id=\"timeseries-mode\"\n                type=\"checkbox\"\n                checked={timeseriesMode}\n                className=\"switch\"\n                aria-label={t('Checked by default to scale uniformly.')}\n                onChange={(event) => {\n                  setTimeseriesMode(!timeseriesMode);\n                }}\n              />\n            </div>\n            <div\n              className={`timeseries-logmode ${\n                chartType !== 1 ? 'disabled' : ''\n              }`}\n            >\n              <label htmlFor=\"timeseries-logmode\">{t('Logarithmic')}</label>\n              <input\n                id=\"timeseries-logmode\"\n                type=\"checkbox\"\n                checked={chartType === 1 && timeseriesLogMode}\n                className=\"switch\"\n                disabled={chartType !== 1}\n                onChange={(event) => {\n                  setTimeseriesLogMode(!timeseriesLogMode);\n                }}\n              />\n            </div>\n          </div>\n\n          {states && (\n            <div className=\"trends-state-name\">\n              <select\n                value={activeStateCode}\n                onChange={({target}) => {\n                  const selectedState = target.selectedOptions[0].getAttribute(\n                    'statedata'\n                  );\n                  onHighlightState(JSON.parse(selectedState));\n                }}\n              >\n                {states.map((s) => {\n                  return (\n                    <option\n                      value={s.statecode}\n                      key={s.statecode}\n                      statedata={JSON.stringify(s)}\n                    >\n                      {s.statecode === 'TT' ? t('All States') : t(s.state)}\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n          )}\n        </div>\n\n        {timeseries && (\n          <TimeSeries\n            timeseriesProp={timeseries}\n            chartType={chartType}\n            mode={timeseriesMode}\n            logMode={timeseriesLogMode}\n            stateCode={activeStateCode}\n            isIntersecting={isTimeseriesIntersecting}\n          />\n        )}\n\n        <div className=\"alert\">\n          <Icon.AlertOctagon />\n          <div className=\"alert-right\">\n            {t('Tested chart is independent of uniform scaling')}\n          </div>\n        </div>\n      </div>\n    </Observer>\n  );\n}\n\nexport default React.memo(TimeSeriesExplorer, isEqual);\n","import axios from 'axios';\nimport * as d3 from 'd3';\nimport React, {useEffect, useRef, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport ForceGraph2D from 'react-force-graph-2d';\n\nconst isEqual = () => {\n  return true;\n};\n\nfunction Clusters({stateCode}) {\n  const [fetched, setFetched] = useState(false);\n  const [stateRawData, setStateRawData] = useState([]);\n  const [networkData, setNetworkData] = useState([]);\n\n  function prepareNetworkData(data) {\n    // Parse data\n    let contractedStr = data.reduce(\n      (acc, v) => acc + v.contractedfromwhichpatientsuspected + ', ',\n      ''\n    );\n    contractedStr = contractedStr.replace(/\\s+/g, '');\n    const sources = new Set(contractedStr.match(/[^,]+/g));\n\n    // Prepare nodes and links\n    const nodes = [];\n    const nodesSet = new Set();\n    const links = [];\n    data.forEach((d) => {\n      const contractedStr = d.contractedfromwhichpatientsuspected.replace(\n        /\\s+/g,\n        ''\n      );\n      const contracted = contractedStr.match(/[^,]+/g);\n      if (contracted) {\n        const pid = 'P' + d.patientnumber;\n        nodesSet.add(pid);\n        nodes.push({\n          id: pid,\n          group: sources.has(pid) ? 'source' : 'target',\n          raw: d,\n        });\n        contracted.forEach((p) => {\n          links.push({\n            source: p,\n            target: pid,\n          });\n        });\n      }\n    });\n\n    // Add missing nodes\n    links.forEach((d) => {\n      if (!nodesSet.has(d.source)) {\n        nodes.push({\n          id: d.source,\n          group: 'source',\n          raw: d.source,\n        });\n        nodesSet.add(d.source);\n      }\n    });\n    return {\n      nodes: nodes,\n      links: links,\n    };\n  }\n\n  useEffect(() => {\n    async function getData() {\n      try {\n        const rawDataResponse = await axios.get(\n          'https://api.covid19india.org/raw_data.json'\n        );\n        setStateRawData(\n          rawDataResponse.data.raw_data.filter((d) => d.statecode === stateCode)\n        );\n        setFetched(true);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    if (!fetched) {\n      getData();\n    }\n  }, [fetched, stateCode]);\n\n  useEffect(() => {\n    setNetworkData(prepareNetworkData(stateRawData));\n  }, [stateRawData]);\n\n  const NetworkGraph = () => {\n    const fgRef = useRef();\n\n    useEffect(() => {\n      const fg = fgRef.current;\n      const width = document.getElementById('clusters').offsetWidth;\n      const height = width;\n      // Deactivate existing forces\n      fg.d3Force('charge').strength(-60);\n      fg.d3Force('collision', d3.forceCollide());\n      fg.d3Force('x', d3.forceX().strength(0.3));\n      fg.d3Force('y', d3.forceY().strength(0.3));\n      fg.d3Force('box', boxForce);\n\n      // Custom force to keep everything inside box\n      function boxForce() {\n        for (let i = 0, n = networkData.nodes.length; i < n; ++i) {\n          const currNode = networkData.nodes[i];\n          currNode.x = Math.max(-width, Math.min(width, currNode.x));\n          currNode.y = Math.max(-height, Math.min(height, currNode.y));\n        }\n      }\n    }, []);\n\n    const width = document.getElementById('clusters').offsetWidth;\n    const height = width;\n\n    return (\n      <ForceGraph2D\n        ref={fgRef}\n        width={width}\n        height={height}\n        graphData={networkData}\n        nodeLabel=\"id\"\n        nodeColor={(node) => (node.group === 'source' ? '#dc3545' : 'gray')}\n        linkDirectionalParticleColor={() => 'red'}\n        linkDirectionalParticles={1}\n        linkDirectionalParticleWidth={(link) =>\n          link.source.id[0] === 'P' ? 2 : 0\n        }\n        enableZoomPanInteraction={false}\n      />\n    );\n  };\n\n  useEffect(() => {\n    ReactDOM.render(<NetworkGraph />, document.getElementById('clusters'));\n  }, [networkData]);\n\n  return <div id=\"clusters\"></div>;\n}\n\nexport default React.memo(Clusters, isEqual);\n","import * as d3 from 'd3';\nimport equal from 'fast-deep-equal';\nimport React, {useEffect, useRef, useState} from 'react';\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.caseType, currProps.caseType)) return false;\n  if (!equal(prevProps.timeseries, currProps.timeseries)) return false;\n  return true;\n};\n\nconst caseColor = (ctype, alpha = '') => {\n  switch (ctype) {\n    case 'dailyconfirmed':\n      return '#dc3545' + alpha;\n    case 'dailyactive':\n      return '#007bff' + alpha;\n    case 'dailyrecovered':\n      return '#28a745' + alpha;\n    case 'dailydeceased':\n      return '#6c757d' + alpha;\n    default:\n      return;\n  }\n};\n\nfunction DeltaBarGraph({timeseries, caseType}) {\n  const [data, setData] = useState([]);\n  const svgRef = useRef();\n\n  useEffect(() => {\n    setData(timeseries);\n  }, [timeseries]);\n\n  useEffect(() => {\n    if (!data.length) return;\n\n    const svg = d3.select(svgRef.current);\n    const width = +svg.attr('width');\n    const height = +svg.attr('height');\n\n    const margin = {top: 50, right: 5, bottom: 50, left: 0};\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const r = 5;\n\n    const formatTime = d3.timeFormat('%e %b');\n    const xScale = d3\n      .scaleBand()\n      .domain(data.map((d) => formatTime(d.date)))\n      .range([margin.left, chartRight])\n      .paddingInner(0.33);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([\n        Math.min(\n          0,\n          d3.min(data, (d) => d[caseType])\n        ),\n        Math.max(\n          1,\n          d3.max(data, (d) => d[caseType])\n        ),\n      ])\n      .range([chartBottom, margin.top]);\n\n    const xAxis = d3.axisBottom(xScale).tickSize(0);\n\n    const t = svg.transition().duration(500);\n    svg\n      .select('.x-axis')\n      .transition(t)\n      .style('transform', `translateY(${yScale(0)}px)`)\n      .call(xAxis)\n      .on('start', () => svg.select('.domain').remove())\n      .selectAll('text')\n      .attr('y', 0)\n      .attr('dy', (d, i) => (data[i][caseType] < 0 ? '-1em' : '1.5em'))\n      .style('text-anchor', 'middle')\n      .attr('fill', caseColor(caseType));\n\n    svg\n      .selectAll('.bar')\n      .data(data)\n      .join('path')\n      .attr('class', 'bar')\n      .transition(t)\n      .attr('d', (d) =>\n        roundedBar(\n          xScale(formatTime(d.date)),\n          yScale(0),\n          xScale.bandwidth(),\n          yScale(0) - yScale(d[caseType]),\n          r\n        )\n      )\n      .attr('fill', (d, i) => {\n        return i < data.length - 1\n          ? caseColor(caseType, '90')\n          : caseColor(caseType);\n      });\n\n    const textSelection = svg\n      .selectAll('.label')\n      .data(data)\n      .join('text')\n      .attr('class', 'label')\n      .attr('x', (d) => xScale(formatTime(d.date)) + xScale.bandwidth() / 2)\n      .text((d) => d[caseType]);\n\n    textSelection\n      .transition(t)\n      .attr('fill', caseColor(caseType))\n      .attr('y', (d) => yScale(d[caseType]) + (d[caseType] < 0 ? 15 : -6));\n\n    textSelection\n      .append('tspan')\n      .attr('dy', (d) => `${d[caseType] < 0 ? 1.2 : -1.2}em`)\n      .attr('x', (d) => xScale(formatTime(d.date)) + xScale.bandwidth() / 2)\n      .text((d, i) =>\n        i && data[i - 1][caseType]\n          ? d3.format('+.1~%')(\n              (data[i][caseType] - data[i - 1][caseType]) /\n                data[i - 1][caseType]\n            )\n          : ''\n      )\n      .transition(t)\n      .attr('fill', caseColor(caseType, '90'));\n  }, [data, caseType]);\n\n  return (\n    <div className=\"DeltaBarGraph fadeInUp\" style={{animationDelay: '0.8s'}}>\n      <svg\n        ref={svgRef}\n        width=\"250\"\n        height=\"250\"\n        viewBox=\"0 0 250 250\"\n        preserveAspectRatio=\"xMidYMid meet\"\n      >\n        <g className=\"x-axis\" />\n        <g className=\"y-axis\" />\n      </svg>\n    </div>\n  );\n}\n\nexport default React.memo(DeltaBarGraph, isEqual);\n\nfunction roundedBar(x, y, w, h, r) {\n  r = Math.sign(h) * Math.min(Math.abs(h), r);\n  const paths = [\n    `M ${x} ${y}`,\n    `v ${-h + r}`,\n    `q 0 ${-r} ${Math.abs(r)} ${-r}`,\n    `h ${w - 2 * Math.abs(r)}`,\n    `q ${Math.abs(r)} 0 ${Math.abs(r)} ${r}`,\n    `v ${h - r}`,\n    'Z',\n  ];\n  return paths.join(' ');\n}\n","import React from 'react';\nimport * as Icon from 'react-feather';\n\nfunction StateMetaCard({\n  title,\n  statistic,\n  total,\n  formula,\n  date,\n  description,\n  className,\n}) {\n  return (\n    <div className={`meta-item ${className}`}>\n      <div className=\"meta-item-top\">\n        <h3>{title}</h3>\n        <span\n          data-tip={formula}\n          data-event=\"touchstart mouseover\"\n          data-event-off=\"mouseleave\"\n          data-for=\"stateMeta\"\n          onClick={(e) => e.stopPropagation()}\n        >\n          <Icon.Info />\n        </span>\n      </div>\n      <h1>{statistic}</h1>\n      <h5>{date}</h5>\n      {total && <h5>{`India has ${total} CPM`}</h5>}\n      <p>{description}</p>\n    </div>\n  );\n}\n\nexport default StateMetaCard;\n","import StateMetaCard from './statemetacard';\n\nimport {formatNumber} from '../utils/commonfunctions';\n\nimport {format, parse} from 'date-fns';\nimport React from 'react';\nimport * as Icon from 'react-feather';\nimport ReactTooltip from 'react-tooltip';\n\nfunction StateMeta({\n  stateData,\n  testObject,\n  population,\n  lastSevenDaysData,\n  totalData,\n}) {\n  const confirmed = stateData.confirmed;\n  const active = stateData.active;\n  const deaths = stateData.deaths;\n  const recovered = confirmed - active - deaths;\n  const sevenDayBeforeData = lastSevenDaysData[0].totalconfirmed;\n  const sevenDayBeforeDate = format(lastSevenDaysData[0].date, 'dd MMM');\n  const previousDayData = lastSevenDaysData[6].totalconfirmed;\n  const previousDayDate = format(lastSevenDaysData[6].date, 'dd MMM');\n  const confirmedPerMillion = (confirmed / population) * 1000000;\n  const recoveryPercent = (recovered / confirmed) * 100;\n  const activePercent = (active / confirmed) * 100;\n  const deathPercent = (deaths / confirmed) * 100;\n  const testPerMillion = (testObject?.totaltested / population) * 1000000;\n  const growthRate =\n    ((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100;\n  const totalConfirmedPerMillion =\n    (totalData[0].confirmed / 1332900000) * 1000000;\n  // const doublingRate =\n  // growthRate > 0 ? (70 / Math.round(growthRate)).toFixed(2) : 0;\n\n  const updatedDate = !isNaN(\n    parse(testObject?.updatedon, 'dd/MM/yyyy', new Date())\n  )\n    ? `As of ${format(\n        parse(testObject?.updatedon, 'dd/MM/yyyy', new Date()),\n        'dd MMM'\n      )}`\n    : '';\n\n  return (\n    <React.Fragment>\n      <div className=\"StateMeta population\">\n        <ReactTooltip\n          place=\"top\"\n          type=\"dark\"\n          effect=\"solid\"\n          multiline={true}\n          scrollHide={true}\n          globalEventOff=\"click\"\n          id=\"stateMeta\"\n        />\n        <div className=\"meta-item population fadeInUp\">\n          <h3>Population</h3>\n          <h1>{formatNumber(population)}</h1>\n        </div>\n        <div className=\"alert\">\n          <Icon.Compass />\n          <div className=\"alert-right\">\n            Based on 2019 population projection by NCP{' '}\n            <a\n              href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n              target=\"_noblank\"\n            >\n              report\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"StateMeta\">\n        <StateMetaCard\n          className=\"confirmed\"\n          title={'Confirmed Per Million'}\n          statistic={confirmedPerMillion.toFixed(2)}\n          total={totalConfirmedPerMillion.toFixed(2)}\n          formula={'(confirmed / state population) * 1 Million'}\n          description={`\n            ${Math.round(\n              confirmedPerMillion\n            )} out of every 1 million people in ${\n            stateData.state\n          } have tested positive for the virus.\n            `}\n        />\n\n        <StateMetaCard\n          className=\"active\"\n          title={'Active'}\n          statistic={`${activePercent.toFixed(2)}%`}\n          formula={'(active / confirmed) * 100'}\n          description={`For every 100 confirmed cases, ${activePercent.toFixed(\n            0\n          )} are currently infected.`}\n        />\n\n        <StateMetaCard\n          className=\"recovery\"\n          title={'Recovery Rate'}\n          statistic={`${recoveryPercent.toFixed(2)}%`}\n          formula={'(recovered / confirmed) * 100'}\n          description={`For every 100 confirmed cases,\n            ${Math.round(\n              recoveryPercent.toFixed(0)\n            )} have recovered from the virus.`}\n        />\n\n        <StateMetaCard\n          className=\"mortality\"\n          title={'Mortality Rate'}\n          statistic={`${deathPercent.toFixed(2)}%`}\n          formula={'(deceased / confirmed) * 100'}\n          description={`For every 100 confirmed cases,\n            ${Math.round(\n              deathPercent.toFixed(0)\n            )} have unfortunately passed away from the virus.`}\n        />\n\n        <StateMetaCard\n          className=\"gr\"\n          title={'Avg. Growth Rate'}\n          statistic={growthRate > 0 ? `${Math.round(growthRate / 7)}%` : '-'}\n          formula={\n            '(((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100)/7'\n          }\n          date={`${sevenDayBeforeDate} - ${previousDayDate}`}\n          description={`In the last one week, the number of new infections has grown by an average of ${Math.round(\n            growthRate / 7\n          )}% every day.`}\n        />\n\n        <StateMetaCard\n          className=\"tpm\"\n          title={'Tests Per Million'}\n          statistic={`≈ ${Math.round(testPerMillion)}`}\n          formula={\n            '(total tests in state / total population of state) * 1 Million'\n          }\n          date={updatedDate}\n          description={`For every 1 million people in ${stateData.state},\n            ${Math.round(testPerMillion)} people were tested.`}\n        />\n\n        {/* <div className=\"meta-item ptr fadeInUp\">\n          <div className=\"meta-item-top\">\n            <h3>Positive Test Rate</h3>\n            <span\n              data-tip={\n                'TPM = (total tests in state / total population of state) * 1 Million'\n              }\n              data-event=\"touchstart mouseover\"\n              data-event-off=\"mouseleave\"\n              data-for=\"stateMeta\"\n            >\n              <Icon.Info />\n            </span>\n          </div>\n          <h1>\n            {testObject?.testpositivityrate\n              ? testObject.testpositivityrate\n              : 'N/A'}\n          </h1>\n          {updatedDate}\n          <p>\n            {testObject?.testpositivityrate\n              ? `Out the of total tests conducted till date month, ${testObject.testpositivityrate}% were positive for the virus`\n              : 'N/A'}\n          </p>\n        </div>*/}\n\n        {/*\n          <div className=\"meta-item dbr fadeInUp\">\n            <div className=\"meta-item-top\">\n              <h3>Doubling Rate</h3>\n              <Icon.Info />\n            </div>\n            <h1>\n              {doublingRate > 0 ? Math.round(doublingRate * 7) + ' Days' : '-'}\n            </h1>\n            <h6 style={{margin: '0'}}>\n              {sevenDayBeforeDate} - {previousDayDate}\n            </h6>\n          </div>\n        )*/}\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default StateMeta;\n","import Clusters from './clusters';\nimport DeltaBarGraph from './deltabargraph';\nimport Footer from './footer';\nimport Level from './level';\nimport MapExplorer from './mapexplorer';\nimport Minigraph from './minigraph';\nimport StateMeta from './statemeta';\nimport TimeSeriesExplorer from './timeseriesexplorer';\n\nimport {STATE_CODES, STATE_POPULATIONS} from '../constants';\nimport {\n  formatDateAbsolute,\n  formatNumber,\n  mergeTimeseries,\n  parseStateTimeseries,\n  parseStateTestData,\n  parseStateTestTimeseries,\n  parseDistrictZones,\n} from '../utils/commonfunctions';\n\nimport Breadcrumb from '@primer/components/lib/Breadcrumb';\nimport Dropdown from '@primer/components/lib/Dropdown';\nimport anime from 'animejs';\nimport axios from 'axios';\nimport {format, parse} from 'date-fns';\nimport React, {useState} from 'react';\nimport * as Icon from 'react-feather';\nimport {Helmet} from 'react-helmet';\nimport {useTranslation} from 'react-i18next';\nimport {Link, useParams, Redirect} from 'react-router-dom';\nimport {useMeasure, useEffectOnce} from 'react-use';\n\nfunction PureBreadcrumbs({stateName, stateCode, fetched, states}) {\n  const {t} = useTranslation();\n\n  return (\n    <div className=\"breadcrumb\">\n      <Breadcrumb>\n        <Breadcrumb.Item href=\"/\">{t('Home')}</Breadcrumb.Item>\n        <Dropdown direction=\"w\">\n          <summary>\n            <Breadcrumb.Item href={`${stateCode}`} selected>\n              {t(stateName)}\n            </Breadcrumb.Item>\n            <Dropdown.Caret className=\"caret\" />\n          </summary>\n          {fetched && (\n            <Dropdown.Menu direction=\"se\">\n              {states.map((state) => (\n                <Dropdown.Item key={state.statecode} className=\"item\">\n                  <Link to={`${state.statecode}`}>\n                    {t(STATE_CODES[state.statecode])}\n                  </Link>\n                </Dropdown.Item>\n              ))}\n            </Dropdown.Menu>\n          )}\n        </Dropdown>\n      </Breadcrumb>\n    </div>\n  );\n}\n\nconst Breadcrumbs = React.memo(PureBreadcrumbs);\n\nfunction State(props) {\n  const stateCode = useParams().stateCode.toUpperCase();\n  const stateName = STATE_CODES[stateCode];\n\n  const [allStateData, setAllStateData] = useState({});\n  const [fetched, setFetched] = useState(false);\n  const [districtZones, setDistrictZones] = useState(null);\n  const [timeseries, setTimeseries] = useState({});\n  const [stateData, setStateData] = useState(null);\n  const [testData, setTestData] = useState({});\n  const [sources, setSources] = useState({});\n  const [districtData, setDistrictData] = useState({});\n  const [mapOption, setMapOption] = useState('confirmed');\n  const [mapSwitcher, {width}] = useMeasure();\n  const [showAllDistricts, setShowAllDistricts] = useState(false);\n  const [regionHighlighted, setRegionHighlighted] = useState({\n    state: stateName,\n  });\n\n  useEffectOnce(() => {\n    getState();\n  });\n\n  const {t} = useTranslation();\n\n  const getState = async () => {\n    try {\n      const [\n        {data: dataResponse},\n        {data: stateDistrictWiseResponse},\n        {data: statesDailyResponse},\n        {data: stateTestResponse},\n        {data: sourcesResponse},\n        {data: zonesResponse},\n      ] = await Promise.all([\n        axios.get('https://api.covid19india.org/data.json'),\n        axios.get('https://api.covid19india.org/state_district_wise.json'),\n        axios.get('https://api.covid19india.org/states_daily.json'),\n        axios.get('https://api.covid19india.org/state_test_data.json'),\n        axios.get('https://api.covid19india.org/sources_list.json'),\n        axios.get('https://api.covid19india.org/zones.json'),\n      ]);\n      const states = dataResponse.statewise;\n      setAllStateData(states);\n      setStateData([states.find((s) => s.statecode === stateCode)]);\n      // Timeseries\n      const ts = parseStateTimeseries(statesDailyResponse)[stateCode];\n      const testTs = parseStateTestTimeseries(\n        stateTestResponse.states_tested_data\n      )[stateCode];\n      // Merge\n      const tsMerged = mergeTimeseries(\n        {[stateCode]: ts},\n        {[stateCode]: testTs}\n      );\n      setTimeseries(tsMerged[stateCode]);\n      // District data\n      setDistrictData({\n        [stateName]: stateDistrictWiseResponse[stateName],\n      });\n      const sourceList = sourcesResponse.sources_list;\n      setSources(sourceList.filter((state) => state.statecode === stateCode));\n\n      const stateTestData = parseStateTestData(\n        stateTestResponse.states_tested_data\n      );\n      setTestData({[stateName]: stateTestData[stateName]});\n\n      setDistrictZones(parseDistrictZones(zonesResponse.zones, stateName));\n\n      setFetched(true);\n      anime({\n        targets: '.highlight',\n        duration: 200,\n        delay: 3000,\n        translateX:\n          mapOption === 'confirmed'\n            ? `${width * 0}px`\n            : mapOption === 'active'\n            ? `${width * 0.25}px`\n            : mapOption === 'recovered'\n            ? `${width * 0.5}px`\n            : mapOption === 'deceased'\n            ? `${width * 0.75}px`\n            : '0px',\n        easing: 'spring(1, 80, 90, 10)',\n        opacity: 1,\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const testObj = testData[stateName];\n  const population = STATE_POPULATIONS[stateName];\n\n  function toggleShowAllDistricts() {\n    setShowAllDistricts(!showAllDistricts);\n  }\n\n  const getGridRowCount = () => {\n    const gridColumnCount = window.innerWidth >= 540 ? 3 : 2;\n    const districtCount =\n      (districtData[stateName] &&\n        Object.keys(districtData[stateName].districtData).length) ||\n      0;\n    const gridRowCount = Math.ceil(districtCount / gridColumnCount);\n    return gridRowCount;\n  };\n  const gridRowCount = getGridRowCount();\n\n  if (!stateName) {\n    return <Redirect to=\"/\" />;\n  } else {\n    return (\n      <React.Fragment>\n        <Helmet>\n          <title>\n            Coronavirus Outbreak in {STATE_CODES[stateCode]} - covid19india.org\n          </title>\n          <meta\n            name=\"title\"\n            content={`Coronavirus Outbreak in ${STATE_CODES[stateCode]}: Latest Map and Case Count`}\n          />\n        </Helmet>\n\n        <div className=\"State\">\n          <div className=\"state-left\">\n            {fetched && (\n              <Breadcrumbs\n                stateName={stateName}\n                stateCode={stateCode}\n                fetched={fetched}\n                states={allStateData.filter(\n                  (state) =>\n                    state.statecode !== 'TT' && state.statecode !== stateCode\n                )}\n              />\n            )}\n\n            <div className=\"header\">\n              <div\n                className=\"header-left fadeInUp\"\n                style={{animationDelay: '0.3s'}}\n              >\n                <h1>{t(stateName)}</h1>\n                <h5>\n                  Last Updated on{' '}\n                  {stateData && Object.keys(stateData[0]).length\n                    ? formatDateAbsolute(stateData[0].lastupdatedtime)\n                    : ''}\n                </h5>\n              </div>\n\n              <div\n                className=\"header-right fadeInUp\"\n                style={{animationDelay: '0.5s'}}\n              >\n                <h5>{t('Tested')}</h5>\n                <h2>{formatNumber(testObj?.totaltested)}</h2>\n                <h5 className=\"timestamp\">\n                  {!isNaN(parse(testObj?.updatedon, 'dd/MM/yyyy', new Date()))\n                    ? `As of ${format(\n                        parse(testObj?.updatedon, 'dd/MM/yyyy', new Date()),\n                        'dd MMM'\n                      )}`\n                    : ''}\n                </h5>\n                <h5>\n                  {'per '}\n                  {testObj?.totaltested && (\n                    <a href={testObj?.source} target=\"_noblank\">\n                      source\n                    </a>\n                  )}\n                </h5>\n              </div>\n            </div>\n\n            {fetched && (\n              <div className=\"map-switcher\" ref={mapSwitcher}>\n                <div\n                  className={`highlight ${mapOption}`}\n                  style={{\n                    transform: `translateX(${width * 0}px)`,\n                    opacity: 0,\n                  }}\n                ></div>\n                <div\n                  className=\"clickable\"\n                  onClick={() => {\n                    setMapOption('confirmed');\n                    anime({\n                      targets: '.highlight',\n                      translateX: `${width * 0}px`,\n                      easing: 'spring(1, 80, 90, 10)',\n                    });\n                  }}\n                ></div>\n                <div\n                  className=\"clickable\"\n                  onClick={() => {\n                    setMapOption('active');\n                    anime({\n                      targets: '.highlight',\n                      translateX: `${width * 0.25}px`,\n                      easing: 'spring(1, 80, 90, 10)',\n                    });\n                  }}\n                ></div>\n                <div\n                  className=\"clickable\"\n                  onClick={() => {\n                    setMapOption('recovered');\n                    anime({\n                      targets: '.highlight',\n                      translateX: `${width * 0.5}px`,\n                      easing: 'spring(1, 80, 90, 10)',\n                    });\n                  }}\n                ></div>\n                <div\n                  className=\"clickable\"\n                  onClick={() => {\n                    setMapOption('deceased');\n                    anime({\n                      targets: '.highlight',\n                      translateX: `${width * 0.75}px`,\n                      easing: 'spring(1, 80, 90, 10)',\n                    });\n                  }}\n                ></div>\n              </div>\n            )}\n\n            {fetched && <Level data={stateData[0]} />}\n            {fetched && <Minigraph timeseries={timeseries} />}\n            {fetched && (\n              <MapExplorer\n                mapName={stateName}\n                states={stateData}\n                districts={districtData}\n                zones={districtZones}\n                stateTestData={testData}\n                regionHighlighted={regionHighlighted}\n                setRegionHighlighted={setRegionHighlighted}\n                mapOption={mapOption}\n                isCountryLoaded={false}\n              />\n            )}\n\n            {fetched && (\n              <div className=\"meta-secondary\">\n                <div className=\"alert\">\n                  <Icon.AlertCircle />\n                  <div className=\"alert-right\">\n                    Awaiting district details for{' '}\n                    {districtData[stateName]?.districtData['Unknown']\n                      ?.confirmed || '0'}{' '}\n                    cases\n                  </div>\n                </div>\n                <div className=\"alert\">\n                  <Icon.Compass />\n                  <div className=\"alert-right\">\n                    Data collected from sources{' '}\n                    {sources.length > 0\n                      ? Object.keys(sources[0]).map((key, index) => {\n                          if (key.match('source') && sources[0][key] !== '') {\n                            const num = key.match(/\\d+/);\n                            return (\n                              <React.Fragment key={index}>\n                                {num > 1 ? ',' : ''}\n                                <a href={sources[0][key]}>{num}</a>\n                              </React.Fragment>\n                            );\n                          }\n                          return null;\n                        })\n                      : ''}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {fetched && (\n              <StateMeta\n                stateData={stateData[0]}\n                testObject={testObj}\n                population={population}\n                lastSevenDaysData={timeseries.slice(-7)}\n                totalData={allStateData.filter(\n                  (state) => state.statecode === 'TT'\n                )}\n              />\n            )}\n\n            {fetched && (\n              <div\n                className=\"Clusters fadeInUp\"\n                style={{animationDelay: '0.8s'}}\n              >\n                <h1>Network of Transmission</h1>\n                <Clusters stateCode={stateCode} />\n              </div>\n            )}\n          </div>\n\n          <div className=\"state-right\">\n            {fetched && (\n              <React.Fragment>\n                <div\n                  className=\"district-bar\"\n                  style={!showAllDistricts ? {display: 'flex'} : {}}\n                >\n                  <div\n                    className=\"district-bar-left fadeInUp\"\n                    style={{animationDelay: '0.6s'}}\n                  >\n                    <h2 className={mapOption}>Top districts</h2>\n                    <div\n                      className={`districts ${\n                        showAllDistricts ? 'is-grid' : ''\n                      }`}\n                      style={\n                        showAllDistricts\n                          ? {gridTemplateRows: `repeat(${gridRowCount}, 2rem)`}\n                          : {}\n                      }\n                    >\n                      {districtData[stateName]\n                        ? Object.keys(districtData[stateName].districtData)\n                            .filter((d) => d !== 'Unknown')\n                            .sort((a, b) => {\n                              const districtB =\n                                districtData[stateName].districtData[b];\n                              const districtA =\n                                districtData[stateName].districtData[a];\n                              return (\n                                districtB[mapOption] - districtA[mapOption]\n                              );\n                            })\n                            .slice(0, showAllDistricts ? undefined : 5)\n                            .map((district, index) => {\n                              const cases =\n                                districtData[stateName].districtData[district];\n                              return (\n                                <div key={index} className=\"district\">\n                                  <h2>{cases[mapOption]}</h2>\n                                  <h5>{t(district)}</h5>\n                                  {mapOption !== 'active' && (\n                                    <div className=\"delta\">\n                                      <Icon.ArrowUp className={mapOption} />\n                                      <h6 className={mapOption}>\n                                        {cases.delta[mapOption]}\n                                      </h6>\n                                    </div>\n                                  )}\n                                </div>\n                              );\n                            })\n                        : ''}\n                    </div>\n                    {districtData[stateName] &&\n                      Object.keys(districtData[stateName].districtData).length >\n                        5 && (\n                        <button\n                          className=\"button\"\n                          onClick={toggleShowAllDistricts}\n                        >\n                          {showAllDistricts ? `View less` : `View all`}\n                        </button>\n                      )}\n                  </div>\n                  <div className=\"district-bar-right\">\n                    {(mapOption === 'confirmed' ||\n                      mapOption === 'deceased') && (\n                      <div\n                        className=\"happy-sign fadeInUp\"\n                        style={{animationDelay: '0.6s'}}\n                      >\n                        {timeseries\n                          .slice(-5)\n                          .every((day) => day[`daily${mapOption}`] === 0) && (\n                          <div\n                            className={`alert ${\n                              mapOption === 'confirmed' ? 'is-green' : ''\n                            }`}\n                          >\n                            <Icon.Smile />\n                            <div className=\"alert-right\">\n                              No new {mapOption} cases in the past five days\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                    {\n                      <DeltaBarGraph\n                        timeseries={timeseries.slice(-5)}\n                        caseType={`daily${mapOption}`}\n                      />\n                    }\n                  </div>\n                </div>\n                <TimeSeriesExplorer timeseries={timeseries} />\n              </React.Fragment>\n            )}\n          </div>\n        </div>\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default React.memo(State);\n"],"sourceRoot":""}